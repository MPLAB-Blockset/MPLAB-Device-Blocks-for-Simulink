<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Timer Blocks on MPLAB Blockset for MATLAB/Simulink</title><link>/block_reference/timers.html</link><description>Recent content in Timer Blocks on MPLAB Blockset for MATLAB/Simulink</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 16 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="/block_reference/timers/index.xml" rel="self" type="application/rss+xml"/><item><title>IC - Input Capture Block</title><link>/block_reference/timers/input_capture.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/block_reference/timers/input_capture.html</guid><description>&lt;div class="block-icon-container">
 &lt;picture class="block-icon-image">
 &lt;source srcset="../../assets/images/blocks/timers/InputCapture.svg" type="image/svg+xml">
 &lt;img src="../../assets/images/blocks/timers/InputCapture.png" alt="Input Capture Block Icon">
 &lt;/picture>
 &lt;div class="block-icon-description">
 IC - Input Capture Block InputCapture Block Icon The &lt;strong>MCHP_IC&lt;/strong> block captures hardware timer values when external events occur on input pins. It enables precise measurement of pulse widths, periods, frequencies, and event timestamps using dedicated Input Capture peripheral modules. Each IC channel can detect rising edges, falling edges, or both, and automatically capture the associated timer value. This is ideal for encoder interfaces, frequency measurement, and event timing applications.
 &lt;/div>
&lt;/div>

&lt;p>IC - Input Capture Block&lt;/p></description></item><item><title>OC HW - Output Compare (Hardware)</title><link>/block_reference/timers/output_compare_hw.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/block_reference/timers/output_compare_hw.html</guid><description>&lt;div class="block-icon-container">
 &lt;picture class="block-icon-image">
 &lt;source srcset="../../assets/images/blocks/timers/OutputCompare_HW.svg" type="image/svg+xml">
 &lt;img src="../../assets/images/blocks/timers/OutputCompare_HW.png" alt="Output Compare HW Block Icon">
 &lt;/picture>
 &lt;div class="block-icon-description">
 The &lt;strong>MCHP_OC_HW&lt;/strong> block provides hardware-based output generation using the Output Compare (OC) peripheral. It generates PWM signals, toggles outputs, or creates precise timing events based on timer comparisons with &lt;strong>no CPU overhead&lt;/strong> during normal operation.
 &lt;/div>
&lt;/div>

&lt;p>The &lt;strong>MCHP_OC_HW&lt;/strong> block provides hardware-based output generation using the Output Compare (OC) peripheral. It generates PWM signals, toggles outputs, or creates precise timing events based on timer comparisons with &lt;strong>no CPU overhead&lt;/strong> during normal operation.&lt;/p></description></item><item><title>OC SW - Software Output Compare</title><link>/block_reference/timers/output_compare_sw.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/block_reference/timers/output_compare_sw.html</guid><description>&lt;div class="block-icon-container">
 &lt;picture class="block-icon-image">
 &lt;source srcset="../../assets/images/blocks/timers/OutputCompare_SW.svg" type="image/svg+xml">
 &lt;img src="../../assets/images/blocks/timers/OutputCompare_SW.png" alt="Output Compare SW Block Icon">
 &lt;/picture>
 &lt;div class="block-icon-description">
 The &lt;strong>MCHP_OC_SW&lt;/strong> block provides &lt;strong>interrupt-driven software output compare&lt;/strong> functionality. Unlike hardware OC which operates autonomously, this block uses timer interrupts to precisely time output pin changes, offering &lt;strong>greater flexibility&lt;/strong> at the cost of CPU overhead.
 &lt;/div>
&lt;/div>

&lt;p>The &lt;strong>MCHP_OC_SW&lt;/strong> block provides &lt;strong>interrupt-driven software output compare&lt;/strong> functionality. Unlike hardware OC which operates autonomously, this block uses timer interrupts to precisely time output pin changes, offering &lt;strong>greater flexibility&lt;/strong> at the cost of CPU overhead.&lt;/p></description></item><item><title>TIMER Config - Timer Configuration Block</title><link>/block_reference/timers/timer_config.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/block_reference/timers/timer_config.html</guid><description>&lt;div class="block-icon-container">
 &lt;picture class="block-icon-image">
 &lt;source srcset="../../assets/images/blocks/timers/Timer.svg" type="image/svg+xml">
 &lt;img src="../../assets/images/blocks/timers/Timer.png" alt="Timer Config Block Icon">
 &lt;/picture>
 &lt;div class="block-icon-description">
 TIMER Config - Timer Configuration Block Timer Block Icon The &lt;strong>MCHP_TIMER_Config&lt;/strong> block provides a high-level interface for configuring hardware timers on Microchip microcontrollers. This block creates and manages named timer resources that can be shared across multiple peripherals in the model, providing automatic timer allocation and optimal prescaler selection. Unlike direct timer register access, this block manages the complete timer lifecycle including resource allocation, conflict resolution, and automatic prescaler calculation based on desired resolution and period requirements.
 &lt;/div>
&lt;/div>

&lt;p>TIMER Config - Timer Configuration Block&lt;/p></description></item><item><title>TIMER PIL Profiling - PIL Timing Profiler</title><link>/block_reference/timers/timer_pil_profiling.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/block_reference/timers/timer_pil_profiling.html</guid><description>&lt;div class="block-icon-container">
 &lt;picture class="block-icon-image">
 &lt;source srcset="../../assets/images/blocks/timers/Timer_PIL_Profiling.svg" type="image/svg+xml">
 &lt;img src="../../assets/images/blocks/timers/Timer_PIL_Profiling.png" alt="Timer PIL Profiling Block Icon">
 &lt;/picture>
 &lt;div class="block-icon-description">
 TIMER PIL Profiling - PIL Timing Profiler Timer_PIL_Profiling Block Icon The &lt;strong>MCHP_TIMER_PIL_Profiling&lt;/strong> block enables precise code execution timing measurement during Processor-in-the-Loop (PIL) simulations. It uses hardware timers to measure actual execution time of Simulink subsystems or blocks on target hardware. This block is essential for performance profiling, real-time constraint verification, and optimization of embedded code. It provides microsecond-level timing accuracy using the target&amp;rsquo;s hardware timer peripheral.
 &lt;/div>
&lt;/div>

&lt;p>TIMER PIL Profiling - PIL Timing Profiler&lt;/p></description></item></channel></rss>