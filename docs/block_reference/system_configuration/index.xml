<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>System Configuration Blocks on MPLAB Device Blocks for Simulink</title><link>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system_configuration/index.html</link><description>Recent content in System Configuration Blocks on MPLAB Device Blocks for Simulink</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 18 Oct 2025 01:32:36 +0200</lastBuildDate><atom:link href="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system_configuration/index.xml" rel="self" type="application/rss+xml"/><item><title>CompilerOptimisation</title><link>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system_configuration/compiler_options.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system_configuration/compiler_options.html</guid><description>&lt;div class="block-icon-container"&gt;
 &lt;div class="block-icon-image"&gt;
 &lt;picture&gt;
 &lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_configuration/CompilerOptimisation.svg" type="image/svg+xml"&gt;&lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_configuration/CompilerOptimisation_hu_426ef2b66cf52c3e.webp" type="image/webp"&gt;
 &lt;img src="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_configuration/CompilerOptimisation.png" alt="Compiler Options Block Icon"&gt;
 &lt;/picture&gt;
 &lt;/div&gt;

 &lt;div class="block-icon-description"&gt;
 The &lt;strong&gt;CompilerOptimisation&lt;/strong&gt; block configures compiler toolchain, optimization levels, Device Family Pack (DFP) selection, and linker options for controlling code size, execution speed, and build behavior.
 &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id="compiler-selection"&gt;Compiler Selection&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Parameter&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;th&gt;Options&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;COMP_LIST&lt;/td&gt;
 &lt;td&gt;Installed compiler version selection (auto-detected)&lt;/td&gt;
 &lt;td&gt;XC16 v1.xx-v2.xx&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;LATEST_CMPLR&lt;/td&gt;
 &lt;td&gt;Always use latest installed compiler&lt;/td&gt;
 &lt;td&gt;on / off&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;DFP_LIST&lt;/td&gt;
 &lt;td&gt;Device Family Pack version&lt;/td&gt;
 &lt;td&gt;from compiler&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;CMSIS_DSP&lt;/td&gt;
 &lt;td&gt;(ARM)&lt;/td&gt;
 &lt;td&gt;CMSIS DSP library for ARM&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="optimization-levels"&gt;Optimization Levels&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Level&lt;/th&gt;
 &lt;th&gt;Speed&lt;/th&gt;
 &lt;th&gt;Code Size&lt;/th&gt;
 &lt;th&gt;Use Case&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;-O0&lt;/td&gt;
 &lt;td&gt;Slowest&lt;/td&gt;
 &lt;td&gt;Largest&lt;/td&gt;
 &lt;td&gt;Debug - no optimization&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;-O1&lt;/td&gt;
 &lt;td&gt;Moderate&lt;/td&gt;
 &lt;td&gt;Reduced&lt;/td&gt;
 &lt;td&gt;Basic optimization&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;-O2&lt;/td&gt;
 &lt;td&gt;Fast&lt;/td&gt;
 &lt;td&gt;Smaller&lt;/td&gt;
 &lt;td&gt;Production (recommended)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;-O3&lt;/td&gt;
 &lt;td&gt;Fastest&lt;/td&gt;
 &lt;td&gt;May increase&lt;/td&gt;
 &lt;td&gt;Maximum speed&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;-Os&lt;/td&gt;
 &lt;td&gt;Varies&lt;/td&gt;
 &lt;td&gt;Smallest&lt;/td&gt;
 &lt;td&gt;Size-constrained&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="dspic-options-16-bit"&gt;dsPIC Options (16-bit)&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Option&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;th&gt;Impact&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;USE_64BIT_DOUBLE&lt;/td&gt;
 &lt;td&gt;64-bit doubles vs 32-bit&lt;/td&gt;
 &lt;td&gt;2× memory, higher precision&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;PROCEDURAL_ABSTRACTION&lt;/td&gt;
 &lt;td&gt;Extract common code (-mpa)&lt;/td&gt;
 &lt;td&gt;5-15% size reduction&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;MCODE&lt;/td&gt;
 &lt;td&gt;Code memory model&lt;/td&gt;
 &lt;td&gt;small (&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;MDATA&lt;/td&gt;
 &lt;td&gt;Data memory model&lt;/td&gt;
 &lt;td&gt;small (near) / large (far)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;MLARGEARRAY&lt;/td&gt;
 &lt;td&gt;Arrays &amp;gt;32KB&lt;/td&gt;
 &lt;td&gt;32-bit indexing required&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;GC_SECTIONS&lt;/td&gt;
 &lt;td&gt;Remove unused code/data&lt;/td&gt;
 &lt;td&gt;10-30% size reduction&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="armpic32-options-32-bit"&gt;ARM/PIC32 Options (32-bit)&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Option&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;th&gt;Impact&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;OPTIMIZATION_FLTO&lt;/td&gt;
 &lt;td&gt;Link-Time Optimization&lt;/td&gt;
 &lt;td&gt;5-20% improvement, slow build&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;OPTIMIZATION_REORDER&lt;/td&gt;
 &lt;td&gt;Reorder for cache locality&lt;/td&gt;
 &lt;td&gt;Speed improvement&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;CONSERVE_STACK&lt;/td&gt;
 &lt;td&gt;Minimize stack usage&lt;/td&gt;
 &lt;td&gt;Reduced stack requirements&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="debug-options"&gt;Debug Options&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Option&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;th&gt;Output&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;DEBUG_INFO&lt;/td&gt;
 &lt;td&gt;Debug symbols in ELF&lt;/td&gt;
 &lt;td&gt;Required for debugging&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;AssemblyListing&lt;/td&gt;
 &lt;td&gt;.lst file generation&lt;/td&gt;
 &lt;td&gt;Assembly/source mix&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;ProduceHexOutput&lt;/td&gt;
 &lt;td&gt;.hex file generation&lt;/td&gt;
 &lt;td&gt;Programming file&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;MCHP_STACK_USAGE&lt;/td&gt;
 &lt;td&gt;Stack usage report (MCHP)&lt;/td&gt;
 &lt;td&gt;.su files&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;GCC_STACK_USAGE&lt;/td&gt;
 &lt;td&gt;Stack usage report (GCC)&lt;/td&gt;
 &lt;td&gt;.su files&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="linker-configuration"&gt;Linker Configuration&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Parameter&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;UseCustom_LinkerScript&lt;/td&gt;
 &lt;td&gt;Use custom memory map&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;LinkerScript&lt;/td&gt;
 &lt;td&gt;Path to .gld/.ld file&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;HEAP_SIZE&lt;/td&gt;
 &lt;td&gt;Heap allocation (bytes)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;CUSTOM_OPTIM&lt;/td&gt;
 &lt;td&gt;Additional compiler flags&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;CUSTOM_OPTIM_LD&lt;/td&gt;
 &lt;td&gt;Additional linker flags&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="math-libraries-dspic"&gt;Math Libraries (dsPIC)&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Library&lt;/th&gt;
 &lt;th&gt;Speed&lt;/th&gt;
 &lt;th&gt;Accuracy&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Standard&lt;/td&gt;
 &lt;td&gt;Moderate&lt;/td&gt;
 &lt;td&gt;Full precision&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Fast&lt;/td&gt;
 &lt;td&gt;2-3× faster&lt;/td&gt;
 &lt;td&gt;Slightly reduced&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Relaxed&lt;/td&gt;
 &lt;td&gt;Maximum speed&lt;/td&gt;
 &lt;td&gt;Trade precision&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="example-configurations"&gt;Example Configurations&lt;/h2&gt;
&lt;h3 id="debug"&gt;Debug&lt;/h3&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;OPTIMIZATION_LEVEL: -O0
DEBUG_INFO: on
GC_SECTIONS: None
→ Largest code, easiest debugging
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="production-speed"&gt;Production (Speed)&lt;/h3&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;OPTIMIZATION_LEVEL: -O2
PROCEDURAL_ABSTRACTION: on (dsPIC)
OPTIMIZATION_FLTO: on (ARM/PIC32)
GC_SECTIONS: Remove unused
→ Fast execution, moderate size
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="size-constrained"&gt;Size-Constrained&lt;/h3&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;OPTIMIZATION_LEVEL: -Os
PROCEDURAL_ABSTRACTION: on
GC_SECTIONS: Remove unused
→ Minimum code size
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="see-also"&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[MCHP_Master] - Compiler auto-configuration&lt;/li&gt;
&lt;li&gt;[MCHP_PortInfo] - Resource visualization&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>IdleTask</title><link>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system_configuration/idle_task.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system_configuration/idle_task.html</guid><description>&lt;div class="block-icon-container"&gt;
 &lt;div class="block-icon-image"&gt;
 &lt;picture&gt;
 &lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_functions/IdleTask.svg" type="image/svg+xml"&gt;&lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_functions/IdleTask_hu_e1722d6ddb11ef21.webp" type="image/webp"&gt;
 &lt;img src="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_functions/IdleTask.png" alt="Idle Task Block Icon"&gt;
 &lt;/picture&gt;
 &lt;/div&gt;

 &lt;div class="block-icon-description"&gt;
 &lt;strong&gt;Idle Task Characteristics:&lt;/strong&gt; - &lt;strong&gt;Lowest priority&lt;/strong&gt; - Preempted by any scheduled task or interrupt - &lt;strong&gt;Non-deterministic timing&lt;/strong&gt; - Execution time varies with CPU load - &lt;strong&gt;Continuous loop&lt;/strong&gt; - Runs whenever CPU is idle - &lt;strong&gt;Single instance&lt;/strong&gt; - Only one idle task per model - &lt;strong&gt;Power management&lt;/strong&gt; - Ideal location for sleep/idle instructions
 &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id="usage-scenarios"&gt;Usage Scenarios&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Application&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;th&gt;Example Code&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Power Saving&lt;/td&gt;
 &lt;td&gt;Enter low-power mode when idle&lt;/td&gt;
 &lt;td&gt;Idle(); (dsPIC) __WFI(); (ARM)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Watchdog Refresh&lt;/td&gt;
 &lt;td&gt;Service watchdog timer in idle loop&lt;/td&gt;
 &lt;td&gt;ClrWdt();&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Background Communication&lt;/td&gt;
 &lt;td&gt;Process non-critical messages&lt;/td&gt;
 &lt;td&gt;Parse low-priority UART data&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Diagnostics&lt;/td&gt;
 &lt;td&gt;Monitor system health&lt;/td&gt;
 &lt;td&gt;Check stack usage, temperature&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;LED Blinking&lt;/td&gt;
 &lt;td&gt;Visual heartbeat indicator&lt;/td&gt;
 &lt;td&gt;Toggle status LED&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="block-configuration"&gt;Block Configuration&lt;/h2&gt;
&lt;p&gt;The idle task is implemented using a Simulink Function-Call Subsystem:&lt;/p&gt;</description></item><item><title>Interrupt</title><link>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system_configuration/interrupt.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system_configuration/interrupt.html</guid><description>&lt;div class="block-icon-container"&gt;
 &lt;div class="block-icon-image"&gt;
 &lt;picture&gt;
 &lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_functions/Interrupt.svg" type="image/svg+xml"&gt;&lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_functions/Interrupt_hu_be185e9f99fe7b50.webp" type="image/webp"&gt;
 &lt;img src="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_functions/Interrupt.png" alt="Interrupt Block Icon"&gt;
 &lt;/picture&gt;
 &lt;/div&gt;

 &lt;div class="block-icon-description"&gt;
 The &lt;strong&gt;Interrupt&lt;/strong&gt; block creates interrupt-driven subsystems by connecting peripheral interrupt sources to Simulink triggered subsystems. The block automatically manages interrupt vector configuration, priority levels, and timing synchronization. &lt;strong&gt;Key Capabilities:&lt;/strong&gt; - &lt;strong&gt;Automatic interrupt detection&lt;/strong&gt; - Discovers all peripheral interrupts in model - &lt;strong&gt;Dynamic interrupt list&lt;/strong&gt; - Popup shows only available interrupts from active peripherals - &lt;strong&gt;Priority management&lt;/strong&gt; - Configure interrupt priority levels (device-dependent) - &lt;strong&gt;Multiple timing modes&lt;/strong&gt; - Base rate, periodic trigger, or hardware timer-based - &lt;strong&gt;Context preservation&lt;/strong&gt; - Automatic FPU context save/restore (PIC32 with FPU)
 &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id="interrupt-sources"&gt;Interrupt Sources&lt;/h2&gt;
&lt;h3 id="peripheral-interrupts-auto-detected"&gt;Peripheral Interrupts (Auto-detected)&lt;/h3&gt;
&lt;p&gt;The block automatically detects interrupts from peripheral blocks in your model:&lt;/p&gt;</description></item><item><title>Master</title><link>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system_configuration/master.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system_configuration/master.html</guid><description>&lt;div class="block-icon-container"&gt;
 &lt;div class="block-icon-image"&gt;
 &lt;picture&gt;
 &lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_configuration/Master.svg" type="image/svg+xml"&gt;&lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_configuration/Master_hu_352302cec25857c0.webp" type="image/webp"&gt;
 &lt;img src="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_configuration/Master.png" alt="Master Block Icon"&gt;
 &lt;/picture&gt;
 &lt;/div&gt;

 &lt;div class="block-icon-description"&gt;
 &lt;div class="warning" style="background-color: #fff3cd; border-left: 4px solid #ffc107; padding: 15px; margin: 20px 0;"&gt;
 CRITICAL: The Master block is MANDATORY in every MCHP Blockset model. This is always the FIRST block to add to any new model. Without it, no other MCHP blocks will function. Master Block The &lt;strong&gt;Master&lt;/strong&gt; block is the central configuration block for the entire MCHP Blockset. It defines the target microcontroller, clock configuration, peripheral initialization, compiler settings, and code generation options. All other MCHP blocks depend on parameters set in this block. &lt;strong&gt;Primary Functions:&lt;/strong&gt; - &lt;strong&gt;Target Selection&lt;/strong&gt; - Choose from 800+ supported Microchip microcontrollers - &lt;strong&gt;Clock Configuration&lt;/strong&gt; - Configure oscillator, PLL, and system clocks (FCY/FOSC) - &lt;strong&gt;Fuse Settings&lt;/strong&gt; - Set device configuration bits (watchdog, code protection, etc.) - &lt;strong&gt;Build System&lt;/strong&gt; - Configure compiler paths, optimization, and project settings - &lt;strong&gt;External Mode&lt;/strong&gt; - Enable real-time data monitoring via UART - &lt;strong&gt;PIL Testing&lt;/strong&gt; - Processor-in-the-Loop test framework configuration
&lt;/div&gt;
 ## Supported Devices The Master block supports &lt;strong&gt;800+ Microchip microcontrollers&lt;/strong&gt; across multiple families:
 &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id="16-bit-dscmcu-families"&gt;16-bit DSC/MCU Families&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Family&lt;/th&gt;
 &lt;th&gt;Examples&lt;/th&gt;
 &lt;th&gt;Features&lt;/th&gt;
 &lt;th&gt;Applications&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC30F&lt;/td&gt;
 &lt;td&gt;30F1010, 30F2020, 30F6015&lt;/td&gt;
 &lt;td&gt;Legacy DSC, basic DSP engine&lt;/td&gt;
 &lt;td&gt;Motor control, power supplies&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC33F&lt;/td&gt;
 &lt;td&gt;33FJ128MC802, 33FJ256GP710A&lt;/td&gt;
 &lt;td&gt;Enhanced DSP, DMA, advanced PWM&lt;/td&gt;
 &lt;td&gt;Digital power, motor control&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC33E&lt;/td&gt;
 &lt;td&gt;33EP512MU810, 33EP256MC710&lt;/td&gt;
 &lt;td&gt;PPS, DMA, high-speed ADC&lt;/td&gt;
 &lt;td&gt;Motor control, instrumentation&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC33C&lt;/td&gt;
 &lt;td&gt;33CK64MC105, 33CH128MP508&lt;/td&gt;
 &lt;td&gt;Dual-core options, high-speed PWM&lt;/td&gt;
 &lt;td&gt;Motor control, power conversion&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC33A&lt;/td&gt;
 &lt;td&gt;(Latest)&lt;/td&gt;
 &lt;td&gt;33AK128MC106, 33AK512MPS512&lt;/td&gt;
 &lt;td&gt;Advanced PWM with FEP, 12-bit ADC&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;PIC24F/H&lt;/td&gt;
 &lt;td&gt;24F16KL402, 24FJ256GB110&lt;/td&gt;
 &lt;td&gt;General-purpose MCU, low power&lt;/td&gt;
 &lt;td&gt;Portable, battery-powered apps&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="32-bit-mcu-families"&gt;32-bit MCU Families&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Family&lt;/th&gt;
 &lt;th&gt;Examples&lt;/th&gt;
 &lt;th&gt;Features&lt;/th&gt;
 &lt;th&gt;Applications&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;PIC32MK&lt;/td&gt;
 &lt;td&gt;32MK0512MCF064, 32MK1024GPE100&lt;/td&gt;
 &lt;td&gt;MIPS M5150, FPU, motor control&lt;/td&gt;
 &lt;td&gt;Advanced motor control&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;PIC32MZ&lt;/td&gt;
 &lt;td&gt;32MZ2048EFM144, 32MZ1024ECH144&lt;/td&gt;
 &lt;td&gt;High-performance MIPS, crypto&lt;/td&gt;
 &lt;td&gt;IoT, connectivity, graphics&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;PIC32MX&lt;/td&gt;
 &lt;td&gt;32MX795F512L, 32MX440F256H&lt;/td&gt;
 &lt;td&gt;USB, Ethernet, graphics&lt;/td&gt;
 &lt;td&gt;HMI, connectivity&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;PIC32A&lt;/td&gt;
 &lt;td&gt;(New)&lt;/td&gt;
 &lt;td&gt;32AK1216GC41036&lt;/td&gt;
 &lt;td&gt;Next-gen 32-bit architecture&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="arm-based-families-sam"&gt;ARM-based Families (SAM)&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Family&lt;/th&gt;
 &lt;th&gt;Core&lt;/th&gt;
 &lt;th&gt;Examples&lt;/th&gt;
 &lt;th&gt;Features&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;SAME70&lt;/td&gt;
 &lt;td&gt;Cortex-M7&lt;/td&gt;
 &lt;td&gt;SAME70Q21B, SAME70N21B&lt;/td&gt;
 &lt;td&gt;300 MHz, FPU, DSP, Ethernet&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SAMS70&lt;/td&gt;
 &lt;td&gt;Cortex-M7&lt;/td&gt;
 &lt;td&gt;SAMS70Q21B&lt;/td&gt;
 &lt;td&gt;High-speed processing, security&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SAMV71&lt;/td&gt;
 &lt;td&gt;Cortex-M7&lt;/td&gt;
 &lt;td&gt;SAMV71Q21B&lt;/td&gt;
 &lt;td&gt;Automotive, CAN-FD, safety&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SAME5x&lt;/td&gt;
 &lt;td&gt;Cortex-M4F&lt;/td&gt;
 &lt;td&gt;SAME54P20A&lt;/td&gt;
 &lt;td&gt;120 MHz, crypto, low power&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SAMC2x&lt;/td&gt;
 &lt;td&gt;Cortex-M0+&lt;/td&gt;
 &lt;td&gt;SAMC21N18A&lt;/td&gt;
 &lt;td&gt;Motor control, cost-optimized&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SAMD2x&lt;/td&gt;
 &lt;td&gt;Cortex-M0+&lt;/td&gt;
 &lt;td&gt;SAMD21G18A&lt;/td&gt;
 &lt;td&gt;Ultra-low power, IoT&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;PIC32CZ&lt;/td&gt;
 &lt;td&gt;Cortex-M7&lt;/td&gt;
 &lt;td&gt;PIC32CZ_MC70&lt;/td&gt;
 &lt;td&gt;High-performance, security&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="block-parameters"&gt;Block Parameters&lt;/h2&gt;
&lt;h3 id="target-configuration"&gt;Target Configuration&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Parameter&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;th&gt;Values/Range&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;PICREF&lt;/td&gt;
 &lt;td&gt;Microcontroller selection. Dynamic popup filtered by supported families with oscillator support verification.&lt;/td&gt;
 &lt;td&gt;800+ devices&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;PACKAGE&lt;/td&gt;
 &lt;td&gt;(SAM only)&lt;/td&gt;
 &lt;td&gt;Package selection for ARM devices (affects pin availability).&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="clock-configuration"&gt;Clock Configuration&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Parameter&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;th&gt;Values/Range&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;OSCILLATOR_SELECT&lt;/td&gt;
 &lt;td&gt;Primary oscillator source selection. Options dynamically updated based on chip capabilities.&lt;/td&gt;
 &lt;td&gt;• Internal Fast RC (FRC)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;QUARTZ&lt;/td&gt;
 &lt;td&gt;Crystal/resonator frequency when using external oscillator.&lt;/td&gt;
 &lt;td&gt;0.4 MHz to 40 MHz&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;ACTIV_PLL&lt;/td&gt;
 &lt;td&gt;Enable Phase-Locked Loop for frequency multiplication.&lt;/td&gt;
 &lt;td&gt;on / off&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;MIPS_DESIRED&lt;/td&gt;
 &lt;td&gt;Target instruction cycle frequency (FCY). Automatically calculates PLL settings.&lt;/td&gt;
 &lt;td&gt;Device-specific&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;ACLKCON&lt;/td&gt;
 &lt;td&gt;(dsPIC33C only)&lt;/td&gt;
 &lt;td&gt;Auxiliary clock configuration for PWM and other peripherals.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;CPUDIV&lt;/td&gt;
 &lt;td&gt;(SAM Cortex-M0+ only)&lt;/td&gt;
 &lt;td&gt;CPU clock divider selection.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;VDD_range&lt;/td&gt;
 &lt;td&gt;(SAM Cortex-M0+ only)&lt;/td&gt;
 &lt;td&gt;Operating voltage range (affects flash wait states).&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code&gt; Select oscillator source (internal RC or external crystal/clock)
 If using crystal, specify frequency in QUARTZ parameter
 Enable PLL if higher frequencies are required
 Set MIPS_DESIRED to target frequency - PLL multipliers are calculated automatically
 Block display shows achieved MIPS/MHz on the diagram
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="fuse-configuration-device-configuration-bits"&gt;Fuse Configuration (Device Configuration Bits)&lt;/h3&gt;
&lt;p&gt;The Master block exposes device-specific configuration fuses extracted from Microchip XML specifications. Available fuses depend on the selected chip.&lt;/p&gt;</description></item><item><title>MCU LOAD</title><link>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system_configuration/mcu_load.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system_configuration/mcu_load.html</guid><description>&lt;div class="block-icon-container"&gt;
 &lt;div class="block-icon-image"&gt;
 &lt;picture&gt;
 &lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_configuration/MCU_Load.svg" type="image/svg+xml"&gt;&lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_configuration/MCU_Load_hu_95fbbead88a232ba.webp" type="image/webp"&gt;
 &lt;img src="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_configuration/MCU_Load.png" alt="MCU Load Block Icon"&gt;
 &lt;/picture&gt;
 &lt;/div&gt;

 &lt;div class="block-icon-description"&gt;
 The &lt;strong&gt;MCU LOAD&lt;/strong&gt; block measures and outputs the real-time CPU utilization percentage, providing essential feedback for performance optimization and schedulability verification.
 &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id="output-signal"&gt;Output Signal&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Output&lt;/th&gt;
 &lt;th&gt;Data Type&lt;/th&gt;
 &lt;th&gt;Range&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;CPU_Load&lt;/td&gt;
 &lt;td&gt;single (float)&lt;/td&gt;
 &lt;td&gt;0.0 to 100.0&lt;/td&gt;
 &lt;td&gt;Percentage of CPU time used by scheduled tasks&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="measurement-method"&gt;Measurement Method&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-matlab" data-lang="matlab"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0550ae"&gt;//&lt;/span&gt; CPU load calculation&lt;span style="color:#1f2328"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;CPU_Load &lt;span style="color:#1f2328"&gt;=&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#0550ae"&gt;1&lt;/span&gt; &lt;span style="color:#0550ae"&gt;-&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;IdleTime &lt;span style="color:#0550ae"&gt;/&lt;/span&gt; TotalTime&lt;span style="color:#1f2328"&gt;))&lt;/span&gt; × &lt;span style="color:#0550ae"&gt;100&lt;/span&gt;&lt;span style="color:#57606a"&gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Where&lt;span style="color:#1f2328"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; IdleTime &lt;span style="color:#1f2328"&gt;=&lt;/span&gt; Time spent in idle task
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; TotalTime &lt;span style="color:#1f2328"&gt;=&lt;/span&gt; Total elapsed time
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Measurement window&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; Configurable averaging period
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="usage-guidelines"&gt;Usage Guidelines&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;CPU Load Range&lt;/th&gt;
 &lt;th&gt;Status&lt;/th&gt;
 &lt;th&gt;Recommendation&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;0-60%&lt;/td&gt;
 &lt;td&gt;✓ Healthy&lt;/td&gt;
 &lt;td&gt;Good margin for additional features&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;60-80%&lt;/td&gt;
 &lt;td&gt;⚠ Moderate&lt;/td&gt;
 &lt;td&gt;Monitor closely, optimize if growing&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;80-95%&lt;/td&gt;
 &lt;td&gt;⚠ High&lt;/td&gt;
 &lt;td&gt;Optimize code, reduce sample rates&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&amp;gt;95%&lt;/td&gt;
 &lt;td&gt;❌ Critical&lt;/td&gt;
 &lt;td&gt;System unstable, immediate action required&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="example-application"&gt;Example Application&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-matlab" data-lang="matlab"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% Monitor CPU load and trigger optimization&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;CPU_Load → Display &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;live monitoring&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;CPU_Load → Compare &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;threshold &lt;span style="color:#0550ae"&gt;80&lt;/span&gt;&lt;span style="color:#57606a"&gt;%)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; → LED warning &lt;span style="color:#cf222e"&gt;if&lt;/span&gt; exceeded
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% External mode:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% - Tune parameters while monitoring load&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% - Find maximum achievable performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="see-also"&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[MCHP_MCU_OVERLOAD] - Overload detection and recovery&lt;/li&gt;
&lt;li&gt;[MCHP_Tasks_State] - Task execution monitoring&lt;/li&gt;
&lt;li&gt;[MCHP_Scheduler_Options] - Scheduler configuration&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>MCU OVERLOAD</title><link>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system_configuration/mcu_overload.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system_configuration/mcu_overload.html</guid><description>&lt;div class="block-icon-container"&gt;
 &lt;div class="block-icon-image"&gt;
 &lt;picture&gt;
 &lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_configuration/MCU_Overload.svg" type="image/svg+xml"&gt;&lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_configuration/MCU_Overload_hu_7fbbac1655cc78ed.webp" type="image/webp"&gt;
 &lt;img src="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_configuration/MCU_Overload.png" alt="MCU Overload Block Icon"&gt;
 &lt;/picture&gt;
 &lt;/div&gt;

 &lt;div class="block-icon-description"&gt;
 The &lt;strong&gt;MCU OVERLOAD&lt;/strong&gt; block detects when scheduled tasks miss their deadlines and provides diagnostic information for identifying the cause of overload conditions.
 &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id="output-signals"&gt;Output Signals&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Output&lt;/th&gt;
 &lt;th&gt;Data Type&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Overload_Flag&lt;/td&gt;
 &lt;td&gt;boolean&lt;/td&gt;
 &lt;td&gt;1 = Task missed deadline, 0 = Normal operation&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Overload_TaskID&lt;/td&gt;
 &lt;td&gt;uint8&lt;/td&gt;
 &lt;td&gt;ID of task that caused overload (if known)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Overload_Count&lt;/td&gt;
 &lt;td&gt;uint32&lt;/td&gt;
 &lt;td&gt;Cumulative count of overload events&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="overload-conditions"&gt;Overload Conditions&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Condition&lt;/th&gt;
 &lt;th&gt;Detection Method&lt;/th&gt;
 &lt;th&gt;Response&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Task execution exceeds period&lt;/td&gt;
 &lt;td&gt;Compare execution time vs sample time&lt;/td&gt;
 &lt;td&gt;Set flag, log task ID&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Queue overflow&lt;/td&gt;
 &lt;td&gt;Task triggered while already queued&lt;/td&gt;
 &lt;td&gt;Set flag, increment counter&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Preemption cascade&lt;/td&gt;
 &lt;td&gt;Multiple nested preemptions&lt;/td&gt;
 &lt;td&gt;Set flag, identify root task&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="example-usage"&gt;Example Usage&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-matlab" data-lang="matlab"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% Overload detection and safe shutdown&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Overload_Flag → LED &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;visual warning&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Overload_Flag → Switch
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; → &lt;span style="color:#cf222e"&gt;if&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;&lt;span style="color:#0550ae"&gt;1&lt;/span&gt;&lt;span style="color:#1f2328"&gt;):&lt;/span&gt; Enter safe mode
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Disable non&lt;span style="color:#0550ae"&gt;-&lt;/span&gt;critical tasks
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Log diagnostics
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% Recovery strategy:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;if&lt;/span&gt; Overload_Count &lt;span style="color:#0550ae"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#0550ae"&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#57606a"&gt;% Persistent overload - reduce functionality&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Disable_MotorControl&lt;span style="color:#1f2328"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Enable_SafeShutdown&lt;span style="color:#1f2328"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="debugging-with-overload-block"&gt;Debugging with Overload Block&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-matlab" data-lang="matlab"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% Analysis workflow:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0550ae"&gt;1.&lt;/span&gt; Connect outputs to scopes&lt;span style="color:#0550ae"&gt;/&lt;/span&gt;displays
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0550ae"&gt;2.&lt;/span&gt; Run model and observe overload &lt;span style="color:#cf222e"&gt;events&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0550ae"&gt;3.&lt;/span&gt; Identify TaskID causing overload
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0550ae"&gt;4.&lt;/span&gt; Use MCHP_Tasks_State to see task interactions
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0550ae"&gt;5.&lt;/span&gt; Optimize identified task or reduce sample rate
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% Common overload patterns:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;TaskID&lt;span style="color:#1f2328"&gt;=&lt;/span&gt;&lt;span style="color:#0550ae"&gt;1&lt;/span&gt;&lt;span style="color:#1f2328"&gt;,&lt;/span&gt; Count growing → Base rate task too slow
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;TaskID varies randomly → Interrupt storms
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;TaskID&lt;span style="color:#1f2328"&gt;=&lt;/span&gt;&lt;span style="color:#0550ae"&gt;0&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;idle&lt;span style="color:#1f2328"&gt;)&lt;/span&gt; → Should never happen &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;check config&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="see-also"&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[MCHP_MCU_LOAD] - CPU utilization monitoring&lt;/li&gt;
&lt;li&gt;[MCHP_Tasks_State] - Task state visibility&lt;/li&gt;
&lt;li&gt;[MCHP_Scheduler_Options] - Overload behavior config&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Scheduler Options</title><link>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system_configuration/scheduler_options.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system_configuration/scheduler_options.html</guid><description>&lt;div class="block-icon-container"&gt;
 &lt;div class="block-icon-image"&gt;
 &lt;picture&gt;
 &lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_configuration/SchedulerOptions.svg" type="image/svg+xml"&gt;&lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_configuration/SchedulerOptions_hu_55921c25689056c4.webp" type="image/webp"&gt;
 &lt;img src="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_configuration/SchedulerOptions.png" alt="Scheduler Options Block Icon"&gt;
 &lt;/picture&gt;
 &lt;/div&gt;

 &lt;div class="block-icon-description"&gt;
 The &lt;strong&gt;Scheduler Options&lt;/strong&gt; block configures the behavior of the built-in &lt;strong&gt;Rate Monotonic Scheduler&lt;/strong&gt; used for multitasking in MCHP Blockset models. The scheduler manages execution of multiple tasks at different sample rates with &lt;strong&gt;preemptive priority-based scheduling&lt;/strong&gt;. &lt;strong&gt;Rate Monotonic Scheduling Principle:&lt;/strong&gt; - &lt;strong&gt;Highest rate = Highest priority&lt;/strong&gt; - Faster tasks automatically get higher priority - &lt;strong&gt;Preemptive execution&lt;/strong&gt; - Higher priority tasks interrupt lower priority tasks - &lt;strong&gt;Deterministic behavior&lt;/strong&gt; - Guaranteed timing if schedulability conditions are met - &lt;strong&gt;Automatic priority assignment&lt;/strong&gt; - No manual priority configuration needed
 &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id="rate-monotonic-scheduler-architecture"&gt;Rate Monotonic Scheduler Architecture&lt;/h2&gt;
&lt;h3 id="task-priority-assignment"&gt;Task Priority Assignment&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Sample Time&lt;/th&gt;
 &lt;th&gt;Priority Level&lt;/th&gt;
 &lt;th&gt;Can Preempt&lt;/th&gt;
 &lt;th&gt;Example Use&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Base rate (fastest)&lt;/td&gt;
 &lt;td&gt;40 (highest)&lt;/td&gt;
 &lt;td&gt;All slower tasks&lt;/td&gt;
 &lt;td&gt;Fast current loop (50 µs)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;2× base rate&lt;/td&gt;
 &lt;td&gt;30&lt;/td&gt;
 &lt;td&gt;Slower tasks&lt;/td&gt;
 &lt;td&gt;Speed controller (100 µs)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;10× base rate&lt;/td&gt;
 &lt;td&gt;20&lt;/td&gt;
 &lt;td&gt;Even slower tasks&lt;/td&gt;
 &lt;td&gt;Position controller (500 µs)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;100× base rate&lt;/td&gt;
 &lt;td&gt;10&lt;/td&gt;
 &lt;td&gt;Background tasks&lt;/td&gt;
 &lt;td&gt;Communication (5 ms)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Triggered subsystems&lt;/td&gt;
 &lt;td&gt;Configurable&lt;/td&gt;
 &lt;td&gt;Based on config&lt;/td&gt;
 &lt;td&gt;Interrupt-driven tasks&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="block-parameters"&gt;Block Parameters&lt;/h2&gt;
&lt;h3 id="task-overload-behavior"&gt;Task Overload Behavior&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Option&lt;/th&gt;
 &lt;th&gt;Behavior&lt;/th&gt;
 &lt;th&gt;Use Case&lt;/th&gt;
 &lt;th&gt;Risk&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Queue the task&lt;/td&gt;
 &lt;td&gt;(queue length is 1)&lt;/td&gt;
 &lt;td&gt;• If task is still running when next trigger occurs, queue ONE additional execution&lt;/td&gt;
 &lt;td&gt;• Task executes twice back-to-back when current run completes&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Skip this task execution once&lt;/td&gt;
 &lt;td&gt;• If task is running, skip the triggered execution&lt;/td&gt;
 &lt;td&gt;• Resume normal execution at next trigger&lt;/td&gt;
 &lt;td&gt;• Overload does not accumulate&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Delay all new tasks&lt;/td&gt;
 &lt;td&gt;until end of overload&lt;/td&gt;
 &lt;td&gt;• All task triggers are blocked during overload&lt;/td&gt;
 &lt;td&gt;• Tasks resume when overloaded task completes&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="overload-behavior-comparison"&gt;Overload Behavior Comparison&lt;/h3&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;// Task with 10 ms period, execution takes 12 ms (overload)

Option 1: Queue (queue length = 1)
t=0ms: Task starts
t=10ms: Trigger → QUEUED (1 pending)
t=12ms: Task ends → immediately starts queued execution
t=20ms: Trigger → LOST (queue full)
t=24ms: Task ends
t=30ms: Normal execution resumes

Option 2: Skip once
t=0ms: Task starts
t=10ms: Trigger → SKIPPED
t=12ms: Task ends
t=20ms: Normal execution
t=30ms: Normal execution

Option 3: Delay all
t=0ms: Task starts
t=10ms: Trigger → DELAYED
t=12ms: Task ends → delayed trigger executes immediately
t=24ms: Task ends (ran at t=12)
t=30ms: Back to normal (with 2ms delay accumulated)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="multitasking-configuration"&gt;Multitasking Configuration&lt;/h2&gt;
&lt;h3 id="simulink-configuration-requirements"&gt;Simulink Configuration Requirements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Solver Type:&lt;/strong&gt; Fixed-step (required for code generation)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Configuration Parameters → Solver
Type: Fixed-step
Solver: discrete (no continuous states)
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sample Times:&lt;/strong&gt; Define task rates as integer multiples&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-matlab" data-lang="matlab"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Base rate&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0550ae"&gt;50e-6&lt;/span&gt; &lt;span style="color:#57606a"&gt;% 50 µs (20 kHz)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Task &lt;span style="color:#0550ae"&gt;1&lt;/span&gt;&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0550ae"&gt;100e-6&lt;/span&gt; &lt;span style="color:#57606a"&gt;% 2× base rate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Task &lt;span style="color:#0550ae"&gt;2&lt;/span&gt;&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0550ae"&gt;500e-6&lt;/span&gt; &lt;span style="color:#57606a"&gt;% 10× base rate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Task &lt;span style="color:#0550ae"&gt;3&lt;/span&gt;&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0550ae"&gt;5e-3&lt;/span&gt; &lt;span style="color:#57606a"&gt;% 100× base rate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tasking Mode:&lt;/strong&gt; Enable multitasking in configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-matlab" data-lang="matlab"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Configuration Parameters → Code Generation → Interface
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Multi&lt;span style="color:#0550ae"&gt;-&lt;/span&gt;instance code&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; off
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Single output&lt;span style="color:#0550ae"&gt;/&lt;/span&gt;update &lt;span style="color:#cf222e"&gt;function&lt;/span&gt;&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; off
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;⚠️ Let MCHP blockset manage tasking automatically
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="scheduling-algorithm"&gt;Scheduling Algorithm&lt;/h3&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;// Simplified scheduler pseudocode

 execute_task(highest);
 mark_complete(highest);
 ready_tasks = check_triggered_tasks();
 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;h3 id="example-1-motor-control-application"&gt;Example 1: Motor Control Application&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-matlab" data-lang="matlab"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% Three-level motor control hierarchy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% Base rate: 50 µs, Overload: Queue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Sample times&lt;span style="color:#1f2328"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0550ae"&gt;-&lt;/span&gt; Current loop&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0550ae"&gt;50e-6&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;Priority &lt;span style="color:#0550ae"&gt;40&lt;/span&gt; &lt;span style="color:#0550ae"&gt;-&lt;/span&gt; highest&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0550ae"&gt;-&lt;/span&gt; Speed loop&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0550ae"&gt;500e-6&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;Priority &lt;span style="color:#0550ae"&gt;30&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0550ae"&gt;-&lt;/span&gt; Position loop&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0550ae"&gt;5e-3&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;Priority &lt;span style="color:#0550ae"&gt;20&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0550ae"&gt;-&lt;/span&gt; Communication&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0550ae"&gt;100e-3&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;Priority &lt;span style="color:#0550ae"&gt;10&lt;/span&gt; &lt;span style="color:#0550ae"&gt;-&lt;/span&gt; lowest&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Scheduler Options&lt;span style="color:#1f2328"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;TaskOverloadBehaviour&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#39;Queue the task (queue length is 1)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% Result: Current loop can preempt all others&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% Brief overloads are queued and caught up&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="example-2-data-acquisition-system"&gt;Example 2: Data Acquisition System&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-matlab" data-lang="matlab"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% Robust data logging with guaranteed timing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% Base rate: 100 µs, Overload: Delay all&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Sample times&lt;span style="color:#1f2328"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0550ae"&gt;-&lt;/span&gt; Fast ADC&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0550ae"&gt;100e-6&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;Priority &lt;span style="color:#0550ae"&gt;40&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0550ae"&gt;-&lt;/span&gt; Slow sensors&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0550ae"&gt;10e-3&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;Priority &lt;span style="color:#0550ae"&gt;30&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0550ae"&gt;-&lt;/span&gt; Data logging&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0550ae"&gt;100e-3&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;Priority &lt;span style="color:#0550ae"&gt;20&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0550ae"&gt;-&lt;/span&gt; Display update&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0550ae"&gt;500e-3&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;Priority &lt;span style="color:#0550ae"&gt;10&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Scheduler Options&lt;span style="color:#1f2328"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;TaskOverloadBehaviour&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#39;Delay all new tasks until end of overload&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% Result: No samples lost, timing may shift temporarily&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="example-3-communication-system"&gt;Example 3: Communication System&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-matlab" data-lang="matlab"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% Non-critical monitoring allows missed samples&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% Base rate: 1 ms, Overload: Skip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Sample times&lt;span style="color:#1f2328"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0550ae"&gt;-&lt;/span&gt; Protocol handler&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0550ae"&gt;1e-3&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;Priority &lt;span style="color:#0550ae"&gt;40&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0550ae"&gt;-&lt;/span&gt; Data processing&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0550ae"&gt;10e-3&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;Priority &lt;span style="color:#0550ae"&gt;30&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0550ae"&gt;-&lt;/span&gt; Status update&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0550ae"&gt;100e-3&lt;/span&gt; &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;Priority &lt;span style="color:#0550ae"&gt;20&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Scheduler Options&lt;span style="color:#1f2328"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;TaskOverloadBehaviour&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0a3069"&gt;&amp;#39;Skip this task execution once&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% Result: Skipped status updates acceptable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="schedulability-analysis"&gt;Schedulability Analysis&lt;/h2&gt;
&lt;h3 id="liu--layland-utilization-bound"&gt;Liu &amp;amp; Layland Utilization Bound&lt;/h3&gt;
&lt;p&gt;For Rate Monotonic Scheduling, the system is schedulable if:&lt;/p&gt;</description></item><item><title>SECONDARY CORE</title><link>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system_configuration/secondary_core.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system_configuration/secondary_core.html</guid><description>&lt;div class="block-icon-container"&gt;
 &lt;div class="block-icon-image"&gt;
 &lt;picture&gt;
 &lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/dual_core/SECONDARY_core.svg" type="image/svg+xml"&gt;&lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/dual_core/SECONDARY_core_hu_ad02701507152912.webp" type="image/webp"&gt;
 &lt;img src="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/dual_core/SECONDARY_core.png" alt="Secondary Core Block Icon"&gt;
 &lt;/picture&gt;
 &lt;/div&gt;

 &lt;div class="block-icon-description"&gt;
 The &lt;strong&gt;SECONDARY CORE&lt;/strong&gt; block configures the secondary (slave) core in dual-core dsPIC33CH devices.
 &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id="dual-core-architecture"&gt;Dual-Core Architecture&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Feature&lt;/th&gt;
 &lt;th&gt;Master Core&lt;/th&gt;
 &lt;th&gt;Secondary Core&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Device Name&lt;/td&gt;
 &lt;td&gt;33CH128MP508&lt;/td&gt;
 &lt;td&gt;33CH128MP508S1&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Purpose&lt;/td&gt;
 &lt;td&gt;System management&lt;/td&gt;
 &lt;td&gt;Real-time control&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Communication&lt;/td&gt;
 &lt;td&gt;MSI mailboxes, FIFO&lt;/td&gt;
 &lt;td&gt;MSI mailboxes, FIFO&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="development-workflow"&gt;Development Workflow&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-matlab" data-lang="matlab"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% Step 1: Create MASTER core project&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Model&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; Master_Control&lt;span style="color:#1f2328"&gt;.&lt;/span&gt;slx
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;MCHP_Master → PICREF&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0550ae"&gt;33&lt;/span&gt;CH128MP508 &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;master&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% Step 2: Create SECONDARY core project&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Model&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; Secondary_FastLoop&lt;span style="color:#1f2328"&gt;.&lt;/span&gt;slx
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;MCHP_Master → PICREF&lt;span style="color:#1f2328"&gt;:&lt;/span&gt; &lt;span style="color:#0550ae"&gt;33&lt;/span&gt;CH128MP508S1 &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;slave&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% Step 3: Build both projects&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0550ae"&gt;1.&lt;/span&gt; Build secondary → generates &lt;span style="color:#1f2328"&gt;.&lt;/span&gt;s image file
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0550ae"&gt;2.&lt;/span&gt; Build master → links secondary image
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0550ae"&gt;3.&lt;/span&gt; Program master &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;includes slave code&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="see-also"&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[MCHP_Master] - Target device configuration&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Tasks State</title><link>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system_configuration/tasks_state.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system_configuration/tasks_state.html</guid><description>&lt;div class="block-icon-container"&gt;
 &lt;div class="block-icon-image"&gt;
 &lt;picture&gt;
 &lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_configuration/TasksState.svg" type="image/svg+xml"&gt;&lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_configuration/TasksState_hu_aaf7475f4369ced6.webp" type="image/webp"&gt;
 &lt;img src="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/system_configuration/TasksState.png" alt="Tasks State Block Icon"&gt;
 &lt;/picture&gt;
 &lt;/div&gt;

 &lt;div class="block-icon-description"&gt;
 The &lt;strong&gt;Tasks State&lt;/strong&gt; block outputs the current execution state of all scheduled tasks, providing real-time visibility into the multitasking scheduler behavior. Essential for debugging timing issues and verifying task preemption.
 &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id="output-signals"&gt;Output Signals&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Output&lt;/th&gt;
 &lt;th&gt;Data Type&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;th&gt;Values&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;TaskID&lt;/td&gt;
 &lt;td&gt;uint8&lt;/td&gt;
 &lt;td&gt;Currently executing task identifier&lt;/td&gt;
 &lt;td&gt;0 = Idle&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;TaskState&lt;/td&gt;
 &lt;td&gt;uint8 vector&lt;/td&gt;
 &lt;td&gt;State of each task (length = number of tasks)&lt;/td&gt;
 &lt;td&gt;0 = Idle&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Overload&lt;/td&gt;
 &lt;td&gt;boolean&lt;/td&gt;
 &lt;td&gt;Overload condition detected&lt;/td&gt;
 &lt;td&gt;0 = Normal&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="example-usage"&gt;Example Usage&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-matlab" data-lang="matlab"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% Monitor task execution and detect preemption&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% Connect outputs:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;TaskID → Display or scope
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;TaskState → Vector scope &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;multi&lt;span style="color:#0550ae"&gt;-&lt;/span&gt;line&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Overload → Alert&lt;span style="color:#0550ae"&gt;/&lt;/span&gt;LED
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% Interpretation:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;TaskID &lt;span style="color:#1f2328"&gt;=&lt;/span&gt; &lt;span style="color:#0550ae"&gt;1&lt;/span&gt; → Base rate task executing
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;TaskID &lt;span style="color:#1f2328"&gt;=&lt;/span&gt; &lt;span style="color:#0550ae"&gt;2&lt;/span&gt; → First subrate task executing
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;TaskID &lt;span style="color:#1f2328"&gt;=&lt;/span&gt; &lt;span style="color:#0550ae"&gt;0&lt;/span&gt; → Idle task &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;no scheduled work&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;% TaskState example for 3-task system:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;[&lt;/span&gt;&lt;span style="color:#0550ae"&gt;2&lt;/span&gt; &lt;span style="color:#0550ae"&gt;1&lt;/span&gt; &lt;span style="color:#0550ae"&gt;0&lt;/span&gt;&lt;span style="color:#1f2328"&gt;]&lt;/span&gt; → Task &lt;span style="color:#0550ae"&gt;1&lt;/span&gt; running&lt;span style="color:#1f2328"&gt;,&lt;/span&gt; Task &lt;span style="color:#0550ae"&gt;2&lt;/span&gt; ready&lt;span style="color:#1f2328"&gt;,&lt;/span&gt; Task &lt;span style="color:#0550ae"&gt;3&lt;/span&gt; idle
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;[&lt;/span&gt;&lt;span style="color:#0550ae"&gt;1&lt;/span&gt; &lt;span style="color:#0550ae"&gt;2&lt;/span&gt; &lt;span style="color:#0550ae"&gt;0&lt;/span&gt;&lt;span style="color:#1f2328"&gt;]&lt;/span&gt; → Task &lt;span style="color:#0550ae"&gt;1&lt;/span&gt; ready&lt;span style="color:#1f2328"&gt;,&lt;/span&gt; Task &lt;span style="color:#0550ae"&gt;2&lt;/span&gt; running &lt;span style="color:#1f2328"&gt;(&lt;/span&gt;preempted Task &lt;span style="color:#0550ae"&gt;1&lt;/span&gt;&lt;span style="color:#1f2328"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="debugging-scenarios"&gt;Debugging Scenarios&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Observation&lt;/th&gt;
 &lt;th&gt;Diagnosis&lt;/th&gt;
 &lt;th&gt;Action&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;TaskID always 1&lt;/td&gt;
 &lt;td&gt;Base rate never completes&lt;/td&gt;
 &lt;td&gt;Reduce base rate execution time&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;TaskID never changes&lt;/td&gt;
 &lt;td&gt;Single task consuming all CPU&lt;/td&gt;
 &lt;td&gt;Check for infinite loops&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Overload = 1 frequently&lt;/td&gt;
 &lt;td&gt;Tasks missing deadlines&lt;/td&gt;
 &lt;td&gt;Lower sample rates or optimize code&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;TaskState shows [2 2 2]&lt;/td&gt;
 &lt;td&gt;Multiple tasks trying to run simultaneously (impossible)&lt;/td&gt;
 &lt;td&gt;Check scheduler configuration&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="see-also"&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[MCHP_Scheduler_Options] - Scheduler configuration&lt;/li&gt;
&lt;li&gt;[MCHP_MCU_LOAD] - CPU load measurement&lt;/li&gt;
&lt;li&gt;[MCHP_MCU_OVERLOAD] - Overload detection&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>