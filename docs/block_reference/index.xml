<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Block Reference on MPLAB Device Blocks for Simulink</title><link>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/index.html</link><description>Recent content in Block Reference on MPLAB Device Blocks for Simulink</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 18 Oct 2025 01:32:36 +0200</lastBuildDate><atom:link href="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/index.xml" rel="self" type="application/rss+xml"/><item><title>ADC Blocks - Analog-to-Digital Converter Reference</title><link>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/adc_blocks.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/adc_blocks.html</guid><description>&lt;p&gt;The MCHP Blockset provides comprehensive ADC support for all Microchip microcontroller families. Each family has optimized ADC blocks tailored to the specific peripheral architecture and capabilities.&lt;/p&gt;
&lt;h2 id="dspic--pic24-family-adc-blocks"&gt;dsPIC &amp;amp; PIC24 Family ADC Blocks&lt;/h2&gt;
&lt;p&gt;[MCHP_ADC] Standard ADC for dsPIC30F, dsPIC33F, dsPIC33E, dsPIC33C, and PIC24 families. &lt;strong&gt;Resolution:&lt;/strong&gt; 10/12-bit&lt;strong&gt;Features:&lt;/strong&gt; Scan mode, simultaneous sampling, DMA support&lt;strong&gt;Best for:&lt;/strong&gt; General-purpose acquisition, motor control [MCHP_ADC_HighSpeed_SAR_dsPIC] High-speed SAR ADC for dsPIC33C with dedicated cores and shared ADC7. &lt;strong&gt;Resolution:&lt;/strong&gt; 6/8/10/12-bit&lt;strong&gt;Cores:&lt;/strong&gt; 3-6 dedicated + shared ADC7&lt;strong&gt;Speed:&lt;/strong&gt; Up to 3.25 Msps per core&lt;strong&gt;Best for:&lt;/strong&gt; High-speed multi-channel, simultaneous sampling [MCHP_ADC_HS_12b] 12-bit high-speed ADC with software sequencing for dsPIC33A family. &lt;strong&gt;Resolution:&lt;/strong&gt; 12-bit fixed&lt;strong&gt;Cores:&lt;/strong&gt; 2-5 (variant dependent)&lt;strong&gt;Sequencing:&lt;/strong&gt; 6 sequences × 6 conversions&lt;strong&gt;Devices:&lt;/strong&gt; Perseus, Pegasus, Blue Ridge, Serpens (33AK series)&lt;strong&gt;Best for:&lt;/strong&gt; Advanced FOC motor control, flexible multi-channel&lt;/p&gt;</description></item><item><title>Analog Signal Conditioning Blocks Documentation</title><link>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/analog.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/analog.html</guid><description>&lt;p&gt;Integrated analog peripherals for signal amplification, buffering, and voltage generation&lt;/p&gt;
&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;Analog signal conditioning blocks provide access to integrated analog peripherals in Microchip microcontrollers, enabling precision signal processing without external components. These blocks eliminate the need for discrete amplifiers, comparators, and DACs in many applications, reducing BOM cost, board space, and improving signal integrity.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Integrated signal chain reduces external component count
 Direct connection to ADC for optimized analog front-end
 Software-configurable gain and operating modes
 Low noise and high precision for measurement applications
 Calibration capabilities for enhanced accuracy
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="available-blocks"&gt;Available Blocks&lt;/h2&gt;
&lt;p&gt;[&lt;/p&gt;</description></item><item><title>Block Reference</title><link>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/user_functions/c_function_call.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/user_functions/c_function_call.html</guid><description>&lt;div class="block-icon-container"&gt;
 &lt;div class="block-icon-image"&gt;
 &lt;picture&gt;
 &lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/user_functions/C_Function_Call.svg" type="image/svg+xml"&gt;&lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/user_functions/C_Function_Call_hu_1903f38a17cf2455.webp" type="image/webp"&gt;
 &lt;img src="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/user_functions/C_Function_Call.png" alt="C Function Call Block Icon"&gt;
 &lt;/picture&gt;
 &lt;/div&gt;

 &lt;div class="block-icon-description"&gt;
 Complete reference for all MCHP Blockset peripheral blocks.
 &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id="pwm-blocks"&gt;[PWM Blocks]&lt;/h3&gt;
&lt;p&gt;Pulse Width Modulation blocks for motor control and power conversion.&lt;/p&gt;
&lt;h3 id="adc-blocks"&gt;[ADC Blocks]&lt;/h3&gt;
&lt;p&gt;Analog-to-Digital Converter blocks for sensor interfaces.&lt;/p&gt;
&lt;h3 id="communication-blocks"&gt;[Communication Blocks]&lt;/h3&gt;
&lt;p&gt;UART, SPI, I2C, CAN, and other communication interfaces.&lt;/p&gt;
&lt;h3 id="timer-blocks"&gt;[Timer Blocks]&lt;/h3&gt;
&lt;p&gt;Timer and interrupt configuration blocks.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See Also&lt;/h2&gt;
&lt;p&gt;&lt;a href="../getting_started.html"&gt;Getting Started&lt;/a&gt; | &lt;a href="../user_guide.html"&gt;User Guide&lt;/a&gt;&lt;/p&gt;</description></item><item><title>CAN Communication Blocks</title><link>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/can.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/can.html</guid><description>&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;CAN (Controller Area Network)&lt;/strong&gt; block family enables robust, multi-master communication on CAN bus networks. CAN is widely used in automotive, industrial automation, and embedded systems for reliable data exchange in electrically noisy environments.&lt;/p&gt;
&lt;p&gt;The MCHP Blockset provides three blocks for CAN communication: &lt;strong&gt;CAN Config&lt;/strong&gt; for peripheral setup, &lt;strong&gt;CAN Tx&lt;/strong&gt; for message transmission, and &lt;strong&gt;CAN Rx&lt;/strong&gt; for message reception with flexible filtering. These blocks support both CAN 2.0 (standard) and CAN-FD (flexible data-rate) protocols.&lt;/p&gt;</description></item><item><title>CN - Change Notification (Pin Interrupt)</title><link>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/encoders_counters/change_notification.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/encoders_counters/change_notification.html</guid><description>&lt;div class="block-icon-container"&gt;
 &lt;div class="block-icon-image"&gt;
 &lt;picture&gt;
 &lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/digital/ChangeNotification.svg" type="image/svg+xml"&gt;&lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/digital/ChangeNotification_hu_852ac152d222f9ce.webp" type="image/webp"&gt;
 &lt;img src="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/digital/ChangeNotification.png" alt="Change Notification Block Icon"&gt;
 &lt;/picture&gt;
 &lt;/div&gt;

 &lt;div class="block-icon-description"&gt;
 Change Notification - Pin State Change Interrupts and Timing
 &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;The MCHP_CN block provides an interface to the Change Notification (CN) peripheral, which detects pin state changes and measures transition timing. While primarily used for GPIO interrupts (buttons, switches), CN can also serve as a simple encoder interface or pulse counter.
&lt;strong&gt;Key Features:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multi-pin state change detection (up to 32 CN pins)&lt;/li&gt;
&lt;li&gt;Edge detection: rising, falling, or both&lt;/li&gt;
&lt;li&gt;Transition timing measurement (time between edges)&lt;/li&gt;
&lt;li&gt;Period measurement (rising-to-rising or falling-to-falling)&lt;/li&gt;
&lt;li&gt;Programmable pull-up/pull-down resistors&lt;/li&gt;
&lt;li&gt;Interrupt generation on pin change&lt;/li&gt;
&lt;li&gt;Wake from sleep on pin change&lt;/li&gt;
&lt;li&gt;Can be used for simple rotary encoders or pulse counting&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="device-support"&gt;Device Support&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Family&lt;/th&gt;
 &lt;th&gt;CN Type&lt;/th&gt;
 &lt;th&gt;CN Pins&lt;/th&gt;
 &lt;th&gt;Notes&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC30F&lt;/td&gt;
 &lt;td&gt;Type 0&lt;/td&gt;
 &lt;td&gt;CN0-CN15&lt;/td&gt;
 &lt;td&gt;Dedicated CN peripheral&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC33F&lt;/td&gt;
 &lt;td&gt;Type 0&lt;/td&gt;
 &lt;td&gt;CN0-CN23&lt;/td&gt;
 &lt;td&gt;Dedicated CN peripheral&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC33E&lt;/td&gt;
 &lt;td&gt;Type 1&lt;/td&gt;
 &lt;td&gt;All GPIO pins&lt;/td&gt;
 &lt;td&gt;All ports have CN capability&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC33C&lt;/td&gt;
 &lt;td&gt;Type 1&lt;/td&gt;
 &lt;td&gt;All GPIO pins&lt;/td&gt;
 &lt;td&gt;All ports have CN capability&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;PIC32MK&lt;/td&gt;
 &lt;td&gt;Type 2&lt;/td&gt;
 &lt;td&gt;Port-based&lt;/td&gt;
 &lt;td&gt;One interrupt per port&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;PIC24F&lt;/td&gt;
 &lt;td&gt;Type 0/1&lt;/td&gt;
 &lt;td&gt;Varies&lt;/td&gt;
 &lt;td&gt;Family dependent&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="block-parameters"&gt;Block Parameters&lt;/h2&gt;
&lt;h3 id="channel-selection"&gt;Channel Selection&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Parameter&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;CN Channels (dsPIC30F/33F)&lt;/td&gt;
 &lt;td&gt;Vector of CN channel numbers, e.g., [0 1 2] for CN0, CN1, CN2&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;CN Port (dsPIC33E/C, PIC32MK)&lt;/td&gt;
 &lt;td&gt;Port pin list, e.g., [A0 A1 B5] for PA0, PA1, PB5&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="measurement-configuration-per-channel"&gt;Measurement Configuration (per channel)&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Mode Value&lt;/th&gt;
 &lt;th&gt;Measurement&lt;/th&gt;
 &lt;th&gt;Output Ports&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;0&lt;/td&gt;
 &lt;td&gt;Change detect only&lt;/td&gt;
 &lt;td&gt;Change detected flag only&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;1&lt;/td&gt;
 &lt;td&gt;Measure time UP (rising edge to falling edge)&lt;/td&gt;
 &lt;td&gt;T_Up (pulse width high)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;2&lt;/td&gt;
 &lt;td&gt;Measure time DOWN (falling edge to rising edge)&lt;/td&gt;
 &lt;td&gt;T_Down (pulse width low)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;3&lt;/td&gt;
 &lt;td&gt;Measure UP &amp;amp; DOWN&lt;/td&gt;
 &lt;td&gt;T_Up, T_Down&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;4&lt;/td&gt;
 &lt;td&gt;Period on rising edge&lt;/td&gt;
 &lt;td&gt;P_Rising (time between rising edges)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;8&lt;/td&gt;
 &lt;td&gt;Period on falling edge&lt;/td&gt;
 &lt;td&gt;P_Falling (time between falling edges)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;5&lt;/td&gt;
 &lt;td&gt;UP + Period on rising&lt;/td&gt;
 &lt;td&gt;T_Up, P_Rising&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;10&lt;/td&gt;
 &lt;td&gt;DOWN + Period on falling&lt;/td&gt;
 &lt;td&gt;T_Down, P_Falling&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="change-detection-per-channel"&gt;Change Detection (per channel)&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Value&lt;/th&gt;
 &lt;th&gt;Detection Mode&lt;/th&gt;
 &lt;th&gt;Output&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;0&lt;/td&gt;
 &lt;td&gt;No change detection&lt;/td&gt;
 &lt;td&gt;-&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;1&lt;/td&gt;
 &lt;td&gt;Rising edge&lt;/td&gt;
 &lt;td&gt;CNx_Rise (timestamp)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;2&lt;/td&gt;
 &lt;td&gt;Falling edge&lt;/td&gt;
 &lt;td&gt;CNx_Fall (timestamp)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;3&lt;/td&gt;
 &lt;td&gt;Both edges&lt;/td&gt;
 &lt;td&gt;CNx_Rise&amp;amp;Fall (timestamp)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="advanced-configuration"&gt;Advanced Configuration&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Parameter&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Output Port Value&lt;/td&gt;
 &lt;td&gt;Enable current pin state output (boolean per channel)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Max Channel&lt;/td&gt;
 &lt;td&gt;Maximum expected time for measurements (seconds, per channel)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Safe Margin&lt;/td&gt;
 &lt;td&gt;Percentage margin for timer overflow protection (per channel)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Interrupt Priority&lt;/td&gt;
 &lt;td&gt;CN interrupt priority level (1-7)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="cn-peripheral-registers"&gt;CN Peripheral Registers&lt;/h2&gt;
&lt;h3 id="dspic30f33f-type-0"&gt;dsPIC30F/33F (Type 0)&lt;/h3&gt;
&lt;p&gt;// Enable CN module CNCONbits.ON = 1; // Enable specific CN pins CNEN1bits.CN0IE = 1; // Enable CN0 CNEN1bits.CN1IE = 1; // Enable CN1// Enable pull-ups CNPU1bits.CN0PUE = 1; // Pull-up on CN0// Interrupt configuration IFS1bits.CNIF = 0; // Clear interrupt flag IEC1bits.CNIE = 1; // Enable CN interrupt IPC4bits.CNIP = 5; // Priority level// Read current state state = PORTBbits.RB0; // Read pin state (if CN0 is on RB0)&lt;/p&gt;</description></item><item><title>PDEC - Position Decoder for SAM Devices</title><link>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/encoders_counters/pdec.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/encoders_counters/pdec.html</guid><description>&lt;div class="block-icon-container"&gt;
 &lt;div class="block-icon-image"&gt;
 &lt;picture&gt;
 &lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/digital/PDEC.svg" type="image/svg+xml"&gt;&lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/digital/PDEC_hu_ac88e49fe226bfd2.webp" type="image/webp"&gt;
 &lt;img src="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/digital/PDEC.png" alt="PDEC Block Icon"&gt;
 &lt;/picture&gt;
 &lt;/div&gt;

 &lt;div class="block-icon-description"&gt;
 Position Decoder - Hall Sensors and Stepper Motor Interface
 &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;The MCHP_PDEC block provides an interface to the Position Decoder (PDEC) peripheral on SAM E5x and E7x microcontrollers. Unlike traditional quadrature encoders, PDEC is optimized for Hall effect sensors (3-phase BLDC motors) and stepper motor position tracking, with specialized features for these applications.
&lt;strong&gt;Key Features:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3-input position decoder (Hall sensors: A, B, C)&lt;/li&gt;
&lt;li&gt;Quadrature encoder mode (X2/X4)&lt;/li&gt;
&lt;li&gt;Counter with direction input mode&lt;/li&gt;
&lt;li&gt;Configurable position counter and revolution counter&lt;/li&gt;
&lt;li&gt;Auto-correction for phase errors&lt;/li&gt;
&lt;li&gt;Programmable digital filtering&lt;/li&gt;
&lt;li&gt;Index pulse support&lt;/li&gt;
&lt;li&gt;Angular position calculation (9-bit + configurable resolution)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="device-support"&gt;Device Support&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Family&lt;/th&gt;
 &lt;th&gt;PDEC Module&lt;/th&gt;
 &lt;th&gt;Features&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;SAM E54/E53/E51&lt;/td&gt;
 &lt;td&gt;1&lt;/td&gt;
 &lt;td&gt;Hall sensor, quadrature, stepper position&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SAM E70/S70/V71&lt;/td&gt;
 &lt;td&gt;1&lt;/td&gt;
 &lt;td&gt;Hall sensor, quadrature, stepper position&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="block-parameters"&gt;Block Parameters&lt;/h2&gt;
&lt;h3 id="operating-mode"&gt;Operating Mode&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Parameter&lt;/th&gt;
 &lt;th&gt;Options&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Mode&lt;/td&gt;
 &lt;td&gt;• Quadrature Encoder&lt;/td&gt;
 &lt;td&gt;• Counter with direction&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="position-configuration"&gt;Position Configuration&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Parameter&lt;/th&gt;
 &lt;th&gt;Options&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Counter Output&lt;/td&gt;
 &lt;td&gt;on/off&lt;/td&gt;
 &lt;td&gt;Enable position counter output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Counter Datatype&lt;/td&gt;
 &lt;td&gt;unsigned/signed&lt;/td&gt;
 &lt;td&gt;Position counter sign&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Revolution Output&lt;/td&gt;
 &lt;td&gt;on/off&lt;/td&gt;
 &lt;td&gt;Enable revolution counter&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Revolution Datatype&lt;/td&gt;
 &lt;td&gt;unsigned/signed&lt;/td&gt;
 &lt;td&gt;Revolution counter sign&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Counter Revolution Length&lt;/td&gt;
 &lt;td&gt;• Counter is 16-bit (9+7 bit resolution)&lt;/td&gt;
 &lt;td&gt;• Counter is 17-bit (9+8 bit resolution)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="index-and-reset"&gt;Index and Reset&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Parameter&lt;/th&gt;
 &lt;th&gt;Options&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Index&lt;/td&gt;
 &lt;td&gt;• Not used&lt;/td&gt;
 &lt;td&gt;• Reset counter&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Max Counter Reset&lt;/td&gt;
 &lt;td&gt;Integer value&lt;/td&gt;
 &lt;td&gt;Modulo limit for position counter&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Max Position Input&lt;/td&gt;
 &lt;td&gt;on/off&lt;/td&gt;
 &lt;td&gt;Enable dynamic modulo limit via block input&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Reset Input&lt;/td&gt;
 &lt;td&gt;on/off&lt;/td&gt;
 &lt;td&gt;Enable external reset input&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="signal-configuration"&gt;Signal Configuration&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Pin&lt;/th&gt;
 &lt;th&gt;Function (Quadrature)&lt;/th&gt;
 &lt;th&gt;Function (Hall Sensor)&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;QDI0&lt;/td&gt;
 &lt;td&gt;Phase A&lt;/td&gt;
 &lt;td&gt;Hall A&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;QDI1&lt;/td&gt;
 &lt;td&gt;Phase B&lt;/td&gt;
 &lt;td&gt;Hall B&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;QDI2&lt;/td&gt;
 &lt;td&gt;Index&lt;/td&gt;
 &lt;td&gt;Hall C&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Parameter&lt;/td&gt;
 &lt;td&gt;Options&lt;/td&gt;
 &lt;td&gt;Description&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Invert QDI0/1/2&lt;/td&gt;
 &lt;td&gt;on/off&lt;/td&gt;
 &lt;td&gt;Invert input polarity&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Swap Pin Phase A &amp;amp; B&lt;/td&gt;
 &lt;td&gt;on/off&lt;/td&gt;
 &lt;td&gt;Reverse direction (quadrature mode)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Auto Correction&lt;/td&gt;
 &lt;td&gt;on/off&lt;/td&gt;
 &lt;td&gt;Automatic phase error correction&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Digital Filter&lt;/td&gt;
 &lt;td&gt;disabled or time period&lt;/td&gt;
 &lt;td&gt;Input signal filtering&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="hall-sensor-operation"&gt;Hall Sensor Operation&lt;/h2&gt;
&lt;h3 id="3-phase-hall-sensor-interface"&gt;3-Phase Hall Sensor Interface&lt;/h3&gt;
&lt;p&gt;PDEC decodes 3-wire Hall sensor signals for BLDC motor position:
Hall Sensor States (6-step commutation): State | Hall A | Hall B | Hall C | Sector &amp;mdash;&amp;mdash;-|&amp;mdash;&amp;mdash;&amp;ndash;|&amp;mdash;&amp;mdash;&amp;ndash;|&amp;mdash;&amp;mdash;&amp;ndash;|&amp;mdash;&amp;mdash;&amp;ndash; 1 | 0 | 0 | 1 | 0-60° 2 | 0 | 1 | 1 | 60-120° 3 | 0 | 1 | 0 | 120-180° 4 | 1 | 1 | 0 | 180-240° 5 | 1 | 0 | 0 | 240-300° 6 | 1 | 0 | 1 | 300-360° Valid transitions: 1→2→3→4→5→6→1 (CW) 1→6→5→4→3→2→1 (CCW)&lt;/p&gt;</description></item><item><title>PWM Blocks - Block Reference</title><link>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/pwm_blocks.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/pwm_blocks.html</guid><description>&lt;p&gt;Comprehensive PWM (Pulse Width Modulation) blocks for motor control, power conversion, and signal generation across all MCHP Blockset supported families.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Device Family Support:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dsPIC30F/33F/33E: → &lt;a href="pwm_io/pwm.html"&gt;MCHP_PWM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;dsPIC33C/CH/CK: → &lt;a href="pwm_io/pwm_highspeed.html"&gt;MCHP_PWM_HighSpeed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;dsPIC33A: → &lt;a href="pwm_io/pwm_hs_fep.html"&gt;MCHP_PWM_HS_FEP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SAM/ARM: → &lt;a href="pwm_io/pwm_sam7x.html"&gt;MCHP_PWM_SAM7x&lt;/a&gt; or &lt;a href="pwm_io/tcc_pwm.html"&gt;MCHP_TCC_PWM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dspic-family-pwm-blocks"&gt;dsPIC Family PWM Blocks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="pwm_io/pwm.html"&gt;&lt;strong&gt;MCHP_PWM&lt;/strong&gt;&lt;/a&gt; - Standard PWM for dsPIC30F/33F/33E with dead-time and fault protection&lt;/li&gt;
&lt;li&gt;&lt;a href="pwm_io/pwm_highspeed.html"&gt;&lt;strong&gt;MCHP_PWM_HighSpeed&lt;/strong&gt;&lt;/a&gt; - High-Speed PWM with independent time bases and 4 output modes (dsPIC33C/CH/CK)&lt;/li&gt;
&lt;li&gt;&lt;a href="pwm_io/pwm_highspeed_override.html"&gt;&lt;strong&gt;MCHP_PWM_HighSpeed_Override&lt;/strong&gt;&lt;/a&gt; - PWM Override Control for emergency shutdown and diagnostics&lt;/li&gt;
&lt;li&gt;&lt;a href="pwm_io/pwm_hs_fep.html"&gt;&lt;strong&gt;MCHP_PWM_HS_FEP&lt;/strong&gt;&lt;/a&gt; - High-Speed PWM with Fine Edge Positioning, 16× resolution High-Resolution mode (dsPIC33A)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="motor-control-pwm"&gt;Motor Control PWM&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="pwm_io/mcpwm.html"&gt;&lt;strong&gt;MCHP_MCPWM&lt;/strong&gt;&lt;/a&gt; - Motor Control PWM with advanced fault handling, dead-time compensation, and leading-edge blanking (PIC32MK, dsPIC33C, dsPIC33A)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="samarm-family-pwm-blocks"&gt;SAM/ARM Family PWM Blocks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="pwm_io/pwm_sam7x.html"&gt;&lt;strong&gt;MCHP_PWM_SAM7x&lt;/strong&gt;&lt;/a&gt; - SAM7x PWM peripheral for SAME5x/SAME7x/SAMC2x/SAMD2x families&lt;/li&gt;
&lt;li&gt;&lt;a href="pwm_io/pwm_sam7x_override.html"&gt;&lt;strong&gt;MCHP_PWM_SAM7x_Override&lt;/strong&gt;&lt;/a&gt; - SAM7x Override control for PWM outputs&lt;/li&gt;
&lt;li&gt;&lt;a href="pwm_io/tcc_pwm.html"&gt;&lt;strong&gt;MCHP_TCC_PWM&lt;/strong&gt;&lt;/a&gt; - Timer/Counter for Control PWM with pattern generation for BLDC motors (SAME5x, SAMC2x, SAMD2x)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="common-features"&gt;Common Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Output Modes:&lt;/strong&gt; Complementary, Redundant, Push-Pull, Independent&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alignment:&lt;/strong&gt; Edge-aligned, Center-aligned (symmetric/asymmetric)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dead-Time:&lt;/strong&gt; Configurable insertion for shoot-through protection&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fault Protection:&lt;/strong&gt; Hardware fault inputs with configurable response&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ADC Synchronization:&lt;/strong&gt; Trigger outputs for precise current sampling&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;High Resolution:&lt;/strong&gt; Up to 16× enhanced timing precision (selected blocks)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="see-also"&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="../block_reference/"&gt;Block Reference Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="../block_reference/adc_blocks.html"&gt;ADC Blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="../getting_started/motor_control_examples.html"&gt;Motor Control Application Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="../examples/"&gt;PWM Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>QDEC SAMx - Quadrature Decoder for SAM Devices</title><link>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/encoders_counters/qdec_samx.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/encoders_counters/qdec_samx.html</guid><description>&lt;div class="block-icon-container"&gt;
 &lt;div class="block-icon-image"&gt;
 &lt;picture&gt;
 &lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/digital/QDEC_SAMx.svg" type="image/svg+xml"&gt;&lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/digital/QDEC_SAMx_hu_f4b3c4a998d58aca.webp" type="image/webp"&gt;
 &lt;img src="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/digital/QDEC_SAMx.png" alt="QDEC SAMx Block Icon"&gt;
 &lt;/picture&gt;
 &lt;/div&gt;

 &lt;div class="block-icon-description"&gt;
 Quadrature Decoder Using TC Modules - SAM Device Encoder Interface
 &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;The MCHP_QDEC_SAMx block implements quadrature encoder decoding using the Timer/Counter (TC) modules on SAM microcontrollers (E5x, E7x, C2x). Unlike dedicated QEI peripherals, this implementation uses TC modules in quadrature mode to decode encoder signals for position and speed measurement.
&lt;strong&gt;Key Features:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quadrature position decoding using TC modules&lt;/li&gt;
&lt;li&gt;32-bit position counter with revolution counter&lt;/li&gt;
&lt;li&gt;Index pulse support for position reset&lt;/li&gt;
&lt;li&gt;Direction detection&lt;/li&gt;
&lt;li&gt;Speed measurement using time base&lt;/li&gt;
&lt;li&gt;Phase error detection (quadrature integrity check)&lt;/li&gt;
&lt;li&gt;Missing pulse error detection&lt;/li&gt;
&lt;li&gt;Configurable digital filtering&lt;/li&gt;
&lt;li&gt;Rotation change flag&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="device-support"&gt;Device Support&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Family&lt;/th&gt;
 &lt;th&gt;TC Modules&lt;/th&gt;
 &lt;th&gt;Max QDEC Instances&lt;/th&gt;
 &lt;th&gt;Features&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;SAM E54/E53&lt;/td&gt;
 &lt;td&gt;TC0-TC7&lt;/td&gt;
 &lt;td&gt;2-4&lt;/td&gt;
 &lt;td&gt;Position, speed, index, error detection&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SAM E70/S70/V71&lt;/td&gt;
 &lt;td&gt;TC0-TC11&lt;/td&gt;
 &lt;td&gt;4&lt;/td&gt;
 &lt;td&gt;Position, speed, index, error detection&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SAM C21&lt;/td&gt;
 &lt;td&gt;TC0-TC7&lt;/td&gt;
 &lt;td&gt;2-4&lt;/td&gt;
 &lt;td&gt;Position, speed, index, error detection&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; Each QDEC instance requires 3 TC channels (one complete TC module). For example, TC0 uses channels 0, 1, and 2 for phase A/B counting, index counting, and speed time base respectively.&lt;/p&gt;</description></item><item><title>QEI - Quadrature Encoder Interface</title><link>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/encoders_counters/qei.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/encoders_counters/qei.html</guid><description>&lt;div class="block-icon-container"&gt;
 &lt;div class="block-icon-image"&gt;
 &lt;picture&gt;
 &lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/digital/QEI.svg" type="image/svg+xml"&gt;&lt;source srcset="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/digital/QEI_hu_a8e4c27744a4f455.webp" type="image/webp"&gt;
 &lt;img src="https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/images/blocks/digital/QEI.png" alt="QEI Block Icon"&gt;
 &lt;/picture&gt;
 &lt;/div&gt;

 &lt;div class="block-icon-description"&gt;
 Quadrature Encoder Interface - Position and Velocity Measurement
 &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;The MCHP_QEI block provides an interface to the Quadrature Encoder Interface (QEI) peripheral available on dsPIC and PIC32 microcontrollers. This peripheral decodes quadrature encoder signals to measure position, direction, and velocity of rotating shafts, making it ideal for motor control and precision positioning applications.
&lt;strong&gt;Key Features:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quadrature decoding (X2 and X4 modes)&lt;/li&gt;
&lt;li&gt;16-bit or 32-bit position counter&lt;/li&gt;
&lt;li&gt;Index pulse detection and position reset&lt;/li&gt;
&lt;li&gt;Direction sensing&lt;/li&gt;
&lt;li&gt;Programmable digital filtering&lt;/li&gt;
&lt;li&gt;Velocity measurement (32-bit QEI only)&lt;/li&gt;
&lt;li&gt;Multiple operating modes: encoder, pulse counter, up/down counter&lt;/li&gt;
&lt;li&gt;Position modulo and reset options&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="device-support"&gt;Device Support&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Family&lt;/th&gt;
 &lt;th&gt;QEI Type&lt;/th&gt;
 &lt;th&gt;Max Modules&lt;/th&gt;
 &lt;th&gt;Features&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC30F&lt;/td&gt;
 &lt;td&gt;16-bit&lt;/td&gt;
 &lt;td&gt;1-2&lt;/td&gt;
 &lt;td&gt;Basic quadrature decoding, index reset&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC33F&lt;/td&gt;
 &lt;td&gt;16-bit&lt;/td&gt;
 &lt;td&gt;1-2&lt;/td&gt;
 &lt;td&gt;Basic quadrature decoding, index reset&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC33E&lt;/td&gt;
 &lt;td&gt;32-bit&lt;/td&gt;
 &lt;td&gt;1-2&lt;/td&gt;
 &lt;td&gt;Extended position counter, velocity measurement&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC33C&lt;/td&gt;
 &lt;td&gt;32-bit&lt;/td&gt;
 &lt;td&gt;1-2&lt;/td&gt;
 &lt;td&gt;Extended position counter, velocity measurement&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC33A&lt;/td&gt;
 &lt;td&gt;32-bit&lt;/td&gt;
 &lt;td&gt;1-2&lt;/td&gt;
 &lt;td&gt;Enhanced position/velocity, advanced filtering&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;PIC32MK&lt;/td&gt;
 &lt;td&gt;32-bit&lt;/td&gt;
 &lt;td&gt;1-2&lt;/td&gt;
 &lt;td&gt;Extended features, modulo with index reset&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="block-parameters"&gt;Block Parameters&lt;/h2&gt;
&lt;h3 id="operating-mode"&gt;Operating Mode&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Parameter&lt;/th&gt;
 &lt;th&gt;Options&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;QEI Mode&lt;/td&gt;
 &lt;td&gt;• Quadrature Encoder&lt;/td&gt;
 &lt;td&gt;• External Pulse Counter&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;X2/X4 Mode&lt;/td&gt;
 &lt;td&gt;on/off (16-bit QEI only)&lt;/td&gt;
 &lt;td&gt;X2: 2 counts/line, X4: 4 counts/line&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="position-counter-configuration"&gt;Position Counter Configuration&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Parameter&lt;/th&gt;
 &lt;th&gt;Options&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Position Output&lt;/td&gt;
 &lt;td&gt;• is not an output&lt;/td&gt;
 &lt;td&gt;• 16-bit unsigned&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Position Reset Mode&lt;/td&gt;
 &lt;td&gt;• Never reset&lt;/td&gt;
 &lt;td&gt;• Reset on INDEX&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Modulo Limits&lt;/td&gt;
 &lt;td&gt;[Low High] vector&lt;/td&gt;
 &lt;td&gt;Position counter modulo boundaries&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Initial Value&lt;/td&gt;
 &lt;td&gt;Integer&lt;/td&gt;
 &lt;td&gt;Position initialization value&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="index-pulse-configuration"&gt;Index Pulse Configuration&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Parameter&lt;/th&gt;
 &lt;th&gt;Options&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Index Counter Output&lt;/td&gt;
 &lt;td&gt;• is not an output&lt;/td&gt;
 &lt;td&gt;• 16-bit unsigned/signed&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Index Match Value&lt;/td&gt;
 &lt;td&gt;QEA/QEB state (00, 01, 10, 11)&lt;/td&gt;
 &lt;td&gt;Encoder state when index is valid&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Index Polarity&lt;/td&gt;
 &lt;td&gt;Active high/low&lt;/td&gt;
 &lt;td&gt;Index pulse polarity&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="velocity-measurement-32-bit-qei"&gt;Velocity Measurement (32-bit QEI)&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Parameter&lt;/th&gt;
 &lt;th&gt;Options&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Velocity Output&lt;/td&gt;
 &lt;td&gt;• is not an output&lt;/td&gt;
 &lt;td&gt;• 16-bit unsigned&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Period Output&lt;/td&gt;
 &lt;td&gt;• is not an output&lt;/td&gt;
 &lt;td&gt;• 16-bit unsigned&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Max Period&lt;/td&gt;
 &lt;td&gt;Time (seconds)&lt;/td&gt;
 &lt;td&gt;Maximum period for velocity calculation&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="signal-conditioning"&gt;Signal Conditioning&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Parameter&lt;/th&gt;
 &lt;th&gt;Options&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Digital Filter&lt;/td&gt;
 &lt;td&gt;on/off&lt;/td&gt;
 &lt;td&gt;Enable input signal filtering&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Filter Cutoff Freq&lt;/td&gt;
 &lt;td&gt;Frequency (Hz)&lt;/td&gt;
 &lt;td&gt;Low-pass filter cutoff frequency&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Swap QEA/QEB&lt;/td&gt;
 &lt;td&gt;on/off&lt;/td&gt;
 &lt;td&gt;Reverse encoder direction&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Invert Polarity&lt;/td&gt;
 &lt;td&gt;QEA, QEB, INDEX, HOME&lt;/td&gt;
 &lt;td&gt;Invert input signal polarity&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="pin-configuration-remappable-devices"&gt;Pin Configuration (Remappable Devices)&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Pin&lt;/th&gt;
 &lt;th&gt;Function&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;QEA/QEIA&lt;/td&gt;
 &lt;td&gt;Phase A Input&lt;/td&gt;
 &lt;td&gt;Encoder channel A (or pulse input)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;QEB/QEIB&lt;/td&gt;
 &lt;td&gt;Phase B Input&lt;/td&gt;
 &lt;td&gt;Encoder channel B (or direction input)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;INDEX/QEINDX&lt;/td&gt;
 &lt;td&gt;Index Input&lt;/td&gt;
 &lt;td&gt;Index pulse for position reset&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;HOME/QEIHOM&lt;/td&gt;
 &lt;td&gt;Home Input&lt;/td&gt;
 &lt;td&gt;Home reference signal (optional)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="quadrature-encoding-principles"&gt;Quadrature Encoding Principles&lt;/h2&gt;
&lt;h3 id="x4-quadrature-decoding"&gt;X4 Quadrature Decoding&lt;/h3&gt;
&lt;p&gt;In X4 mode, the QEI peripheral counts on both rising and falling edges of both channels, providing 4 counts per encoder line:
QEA &lt;em&gt;&lt;strong&gt;┌───┐&lt;/strong&gt;&lt;/em&gt;┌───┐&lt;em&gt;&lt;strong&gt;┌───┐&lt;/strong&gt;&lt;/em&gt;┌───┐___ │ │ │ │ │ │ │ │ └───┘ └───┘ └───┘ └───┘ QEB &lt;em&gt;&lt;strong&gt;&lt;em&gt;&lt;strong&gt;┌───┐&lt;/strong&gt;&lt;/em&gt;┌───┐&lt;/strong&gt;&lt;/em&gt;┌───┐___┌─── │ │ │ │ │ │ │ ____└───┘ └───┘ └───┘ └─── Count: 0 1 2 3 4 5 6 7 8 9 10 11 12 Direction: FORWARD (QEA leads QEB by 90°)&lt;/p&gt;</description></item><item><title>System Blocks</title><link>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system/system.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>https://mplab-blockset.github.io/MPLAB-Device-Blocks-for-Simulink/block_reference/system/system.html</guid><description>&lt;p&gt;System blocks configure the fundamental behavior of MCHP Blockset models, including target selection, clock configuration, multitasking scheduler, and runtime monitoring.&lt;/p&gt;
&lt;h2 id="core-configuration-blocks"&gt;Core Configuration Blocks&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Block&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;th&gt;Required?&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;MCHP_Master&lt;/td&gt;
 &lt;td&gt;Main configuration block - chip selection, clock, fuses, build settings&lt;/td&gt;
 &lt;td&gt;✓ Yes - ALWAYS required&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;MCHP_Scheduler_Options&lt;/td&gt;
 &lt;td&gt;Rate monotonic scheduler configuration and overload behavior&lt;/td&gt;
 &lt;td&gt;Optional (default settings used)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;MCHP_Interrupt&lt;/td&gt;
 &lt;td&gt;Interrupt service routine configuration for triggered subsystems&lt;/td&gt;
 &lt;td&gt;Optional (for ISR-driven tasks)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="task-management-blocks"&gt;Task Management Blocks&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Block&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;th&gt;Purpose&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;MCHP_IdleTask&lt;/td&gt;
 &lt;td&gt;Background task executed when CPU is idle&lt;/td&gt;
 &lt;td&gt;Power saving, watchdog, diagnostics&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;MCHP_Tasks_State&lt;/td&gt;
 &lt;td&gt;Real-time task execution state monitoring&lt;/td&gt;
 &lt;td&gt;Debug timing, verify preemption&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="performance-monitoring-blocks"&gt;Performance Monitoring Blocks&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Block&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;th&gt;Output&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;MCHP_MCU_LOAD&lt;/td&gt;
 &lt;td&gt;CPU utilization measurement (percentage)&lt;/td&gt;
 &lt;td&gt;0-100% CPU load&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;MCHP_MCU_OVERLOAD&lt;/td&gt;
 &lt;td&gt;Task deadline miss detection and diagnostics&lt;/td&gt;
 &lt;td&gt;Overload flags, task ID, count&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="advanced-features"&gt;Advanced Features&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Block&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;th&gt;Applicability&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;MCHP_SECONDARY_CORE&lt;/td&gt;
 &lt;td&gt;Dual-core secondary (slave) core configuration&lt;/td&gt;
 &lt;td&gt;dsPIC33CH only&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="typical-model-setup"&gt;Typical Model Setup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Add MCHP_Master&lt;/strong&gt; - Select target chip, configure clock&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add peripherals&lt;/strong&gt; - PWM, ADC, UART, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Configure scheduling&lt;/strong&gt; - Add MCHP_Scheduler_Options if custom behavior needed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add monitoring&lt;/strong&gt; - MCHP_MCU_LOAD for performance validation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build and test&lt;/strong&gt; - Verify timing with MCHP_Tasks_State&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="see-also"&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="../block_reference/"&gt;Block Reference Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Utility Blocks] - Compiler optimization, X2C debugging&lt;/li&gt;
&lt;li&gt;[PWM Blocks] - Pulse-width modulation&lt;/li&gt;
&lt;li&gt;[ADC Blocks] - Analog-to-digital conversion&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>