<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on MPLAB Blockset for MATLAB/Simulink</title><link>/getting_started.html</link><description>Recent content in Getting Started on MPLAB Blockset for MATLAB/Simulink</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 16 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="/getting_started/index.xml" rel="self" type="application/rss+xml"/><item><title>Board Templates</title><link>/getting_started/board_templates.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/getting_started/board_templates.html</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>Board templates provide pre-configured Simulink models optimized for popular Microchip development boards. These templates include:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Pre-configured Master block&lt;/strong> with correct chip selection and clock settings&lt;/li>
&lt;li>&lt;strong>Peripheral blocks&lt;/strong> configured for board-specific hardware (PWM, ADC, UART, QEI, etc.)&lt;/li>
&lt;li>&lt;strong>Pin assignments&lt;/strong> matching the physical board layout&lt;/li>
&lt;li>&lt;strong>Example algorithms&lt;/strong> demonstrating typical use cases (motor control, sensor interfaces)&lt;/li>
&lt;li>&lt;strong>Validated configurations&lt;/strong> tested on actual hardware&lt;/li>
&lt;/ul>
&lt;hr>
&lt;div class="note" style="background-color: #f0f8ff; border-left: 4px solid #0076A8; padding: 15px; margin: 20px 0;">
 Key Benefit: Templates eliminate hours of configuration work, allowing you to start developing control algorithms immediately. Simply select your board template, customize the algorithm, and build.
&lt;/div>

&lt;h2 id="why-use-board-templates">Why Use Board Templates?&lt;/h2>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Benefit&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Fast Prototyping&lt;/td>
 &lt;td>Start coding control algorithms in minutes instead of hours spent on peripheral configuration&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Validated Hardware&lt;/td>
 &lt;td>All pin assignments and peripheral settings verified on actual hardware - reduces debugging time&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Best Practices&lt;/td>
 &lt;td>Templates follow Microchip recommended configurations for optimal performance&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Learning Tool&lt;/td>
 &lt;td>Study working examples to understand peripheral configuration patterns&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Easy Portability&lt;/td>
 &lt;td>Switch between boards by simply loading a different template - same algorithm, different hardware&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="available-board-templates">Available Board Templates&lt;/h2>
&lt;p>&lt;img src="../assets/images/toolbox_concepts/MCHP_i_Board_MCLV_2.png" alt="MCLV-2 Development Board">&lt;/p></description></item><item><title>Data Visualization with PIC GUI</title><link>/getting_started/data_visualization.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/getting_started/data_visualization.html</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;h2 id="pic-gui-is-a-lightweight-user-friendly-data-visualization-tool-that-enables-real-time-monitoring-of-variables-from-your-embedded-application-unlike-external-mode-which-requires-xcp-protocol-pic-gui-provides-a-simplified-approach-to-streaming-data-over-uart-for-analysis-and-debugging">PIC GUI is a lightweight, user-friendly data visualization tool that enables real-time monitoring of variables from your embedded application. Unlike External Mode (which requires XCP protocol), PIC GUI provides a simplified approach to streaming data over UART for analysis and debugging.&lt;/h2>
&lt;div class="note" style="background-color: #f0f8ff; border-left: 4px solid #0076A8; padding: 15px; margin: 20px 0;">
 Key Benefit: PIC GUI offers instant data visualization with minimal setup - just add a UART Tx-Matlab block, connect a serial cable, and start plotting. No complex protocol configuration required.
&lt;/div>

&lt;h2 id="pic-gui-vs-external-mode">PIC GUI vs External Mode&lt;/h2>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Feature&lt;/th>
 &lt;th>PIC GUI&lt;/th>
 &lt;th>External Mode&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Communication Protocol&lt;/td>
 &lt;td>Simple UART packet format&lt;/td>
 &lt;td>XCP protocol over Serial/TCP/UDP&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Setup Complexity&lt;/td>
 &lt;td>Very Simple&lt;/td>
 &lt;td>- Drag UART Tx-Matlab block, configure baud rate&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Data Monitoring&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;td>- Stream variables to MATLAB for plotting&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Parameter Tuning&lt;/td>
 &lt;td>No - Read-only data streaming&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Synchronization&lt;/td>
 &lt;td>Asynchronous data logging&lt;/td>
 &lt;td>Synchronized with Simulink simulation time&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Custom Visualization&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;td>- Full MATLAB scripting for custom plots/analysis&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Typical Use Case&lt;/td>
 &lt;td>Data logging, debugging, custom analysis&lt;/td>
 &lt;td>Interactive parameter tuning, live scope monitoring&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Hardware Requirements&lt;/td>
 &lt;td>UART peripheral + USB-Serial adapter&lt;/td>
 &lt;td>UART/Ethernet/CAN + XCP support&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;ul>
&lt;li>
&lt;hr>
&lt;/li>
&lt;li>
&lt;hr>
&lt;/li>
&lt;li>
&lt;hr>
&lt;/li>
&lt;/ul>
&lt;div class="note" style="background-color: #f0f8ff; border-left: 4px solid #0076A8; padding: 15px; margin: 20px 0;">
 &lt;p>When to Use Each Tool:&lt;/p></description></item><item><title>External Mode &amp; PIL Testing - MPLAB Device Blocks for Simulink</title><link>/getting_started/external_mode_pil.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/getting_started/external_mode_pil.html</guid><description>&lt;p>The MPLAB Device Blocks for Simulink provides two powerful tools for testing and validating embedded algorithms:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>External Mode&lt;/strong>: Real-time parameter tuning and data visualization during code execution&lt;/li>
&lt;li>&lt;strong>PIL (Processor-in-the-Loop)&lt;/strong>: Verification of code generation accuracy and performance analysis&lt;/li>
&lt;/ul>
&lt;p>This guide explains both tools, their use cases, setup procedures, and best practices.&lt;/p>
&lt;h2 id="external-mode-real-time-parameter-tuning">External Mode: Real-Time Parameter Tuning&lt;/h2>
&lt;h3 id="what-is-external-mode">What is External Mode?&lt;/h3>
&lt;p>External Mode creates a bidirectional communication link between Simulink and your embedded target while the code is running. This enables:&lt;/p></description></item><item><title>MCHP Blockset Installation</title><link>/getting_started/installation.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/getting_started/installation.html</guid><description>&lt;h2 id="system-requirements">System Requirements&lt;/h2>
&lt;h3 id="matlab-requirements">MATLAB Requirements&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>MATLAB&lt;/strong> - R2010a or later (R2020b+ recommended)&lt;/li>
&lt;li>&lt;strong>Simulink&lt;/strong> - Required for model-based design&lt;/li>
&lt;li>&lt;strong>Embedded Coder&lt;/strong> - Required for code generation&lt;/li>
&lt;li>&lt;strong>MATLAB Coder&lt;/strong> - Required for code generation&lt;/li>
&lt;li>&lt;strong>Simulink Coder&lt;/strong> - Required for code generation&lt;/li>
&lt;/ul>
&lt;h3 id="compiler-requirements">Compiler Requirements&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>XC16&lt;/strong> - For dsPIC 30F, 33F, 33E devices&lt;/li>
&lt;li>&lt;strong>XC-DSC&lt;/strong> - For dsPIC 33C, 33A devices (v3.30+ recommended)&lt;/li>
&lt;li>&lt;strong>XC32&lt;/strong> - For PIC32 and SAM devices (ARM-based)
****[]
&lt;div class="note" style="background-color: #f0f8ff; border-left: 4px solid #0076A8; padding: 15px; margin: 20px 0;">
 Note: Compilers can be downloaded from Microchip Developer Tools
&lt;/div>
&lt;/li>
&lt;/ul>
&lt;h3 id="hardware-requirements">Hardware Requirements&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Programmer/Debugger&lt;/strong> - ICD4, ICD5, PICkit4, or compatible&lt;/li>
&lt;li>&lt;strong>Development Board&lt;/strong> - (Optional) MCLV-2, Curiosity, Explorer 16/32, etc.&lt;/li>
&lt;/ul>
&lt;h2 id="installation-steps">Installation Steps&lt;/h2>
&lt;h3 id="1-install-matlab-toolboxes">1. Install MATLAB Toolboxes&lt;/h3>
&lt;ul>
&lt;li>Launch MATLAB&lt;/li>
&lt;li>Open Add-Ons manager (Home → Add-Ons → Get Add-Ons)&lt;/li>
&lt;li>Install required toolboxes:&lt;/li>
&lt;li>Embedded Coder&lt;/li>
&lt;li>MATLAB Coder&lt;/li>
&lt;li>Simulink Coder&lt;/li>
&lt;/ul>
&lt;h3 id="2-install-microchip-compilers">2. Install Microchip Compilers&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Download compilers from [Microchip website]&lt;/p></description></item><item><title>MCHP Blockset Overview</title><link>/getting_started/overview.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/getting_started/overview.html</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;h2 id="the-mchp-blockset-enables-model-based-design-for-microchip-microcontrollers-providing-a-comprehensive-library-of-peripheral-blocks-for-embedded-code-generation-from-simulink-models">The MCHP Blockset enables Model-Based Design for Microchip microcontrollers, providing a comprehensive library of peripheral blocks for embedded code generation from Simulink models.&lt;/h2>
&lt;div class="note" style="background-color: #f0f8ff; border-left: 4px solid #0076A8; padding: 15px; margin: 20px 0;">
 Key Benefit: Design, simulate, and deploy control algorithms directly to Microchip hardware without hand-coding peripheral drivers.
&lt;/div>

&lt;h2 id="key-features">Key Features&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Automatic C Code Generation&lt;/strong> - Generate optimized embedded C code for dsPIC, PIC32, and SAM devices&lt;/li>
&lt;li>&lt;strong>Comprehensive Peripheral Library&lt;/strong> - PWM, ADC, UART, SPI, I2C, CAN, Timers, and more&lt;/li>
&lt;li>&lt;strong>External Mode&lt;/strong> - Real-time parameter tuning and signal monitoring&lt;/li>
&lt;li>&lt;strong>Processor-in-the-Loop (PIL)&lt;/strong> - Validate generated code on actual hardware&lt;/li>
&lt;li>&lt;strong>Hardware Optimizations&lt;/strong> - Assembly code replacement for dsPIC families&lt;/li>
&lt;li>&lt;strong>Multitasking Scheduler&lt;/strong> - Rate monotonic scheduler for multi-rate applications&lt;/li>
&lt;/ul>
&lt;h2 id="supported-device-families">Supported Device Families&lt;/h2>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Family&lt;/th>
 &lt;th>Architecture&lt;/th>
 &lt;th>Series&lt;/th>
 &lt;th>Typical Applications&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>dsPIC33A&lt;/td>
 &lt;td>32-bit DSC with FPU&lt;/td>
 &lt;td>33AK&lt;/td>
 &lt;td>Advanced Motor Control, Digital Power, Floating-Point DSP&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>dsPIC&lt;/td>
 &lt;td>16-bit DSC&lt;/td>
 &lt;td>30F, 33F, 33E, 33CH, 33CK, 33CDV&lt;/td>
 &lt;td>Motor Control, Power Conversion, Digital Power&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>PIC32&lt;/td>
 &lt;td>32-bit MCU&lt;/td>
 &lt;td>MK, MZ, MX&lt;/td>
 &lt;td>IoT, Industrial Control, Audio Processing&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>SAM&lt;/td>
 &lt;td>ARM Cortex-M&lt;/td>
 &lt;td>E5x, E7x, C2x, D2x&lt;/td>
 &lt;td>Industrial Automation, Motor Control&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>********[]
&lt;div class="note" style="background-color: #f0f8ff; border-left: 4px solid #0076A8; padding: 15px; margin: 20px 0;">
 Note on dsPIC33A: The dsPIC33A family represents a significant architectural advancement with its 32-bit core and hardware FPU, offering 10-100x faster floating-point performance compared to 16-bit dsPIC families. See Supported Devices for details.
&lt;/div>
&lt;/p></description></item><item><title>Motor Control Examples - MPLAB Device Blocks for Simulink</title><link>/getting_started/motor_control_examples.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/getting_started/motor_control_examples.html</guid><description>&lt;h3 id="-third-party-educational-content">⚠️ Third-Party Educational Content&lt;/h3>
&lt;p>&lt;strong>The motor control examples and algorithms presented in this guide are provided by the ctrl-elec project, an educational initiative from INSA Lyon (France).&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Attribution:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Project:&lt;/strong> ctrl-elec - Real-time Control &amp;amp; Embedded Systems Education&lt;/li>
&lt;li>&lt;strong>Institution:&lt;/strong> Institut National des Sciences Appliquées de Lyon (INSA Lyon)&lt;/li>
&lt;li>&lt;strong>Website:&lt;/strong>[https://www.ctrl-elec.fr/]&lt;/li>
&lt;li>&lt;strong>GitHub Repository:&lt;/strong>[https://github.com/rdelpoux/ctrl-elec]&lt;/li>
&lt;li>&lt;strong>RCP Platform:&lt;/strong>[http://rcp.ctrl-elec.fr/]&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>License:&lt;/strong> Educational use - Please refer to the ctrl-elec website for specific licensing terms.&lt;/p>
&lt;p>&lt;em>This content is included in the MPLAB Device Blocks for Simulink documentation to demonstrate real-world motor control applications. Microchip Technology and the MPLAB Device Blocks toolbox are separate from the ctrl-elec project.&lt;/em>&lt;/p></description></item><item><title>Quick Start Guide</title><link>/getting_started/quick_start.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/getting_started/quick_start.html</guid><description>&lt;p>This guide will walk you through creating your first MCHP Blockset project in 10 minutes.&lt;/p>
&lt;h2 id="step-1-open-simulink-library-browser">Step 1: Open Simulink Library Browser&lt;/h2>
&lt;ul>
&lt;li>Launch MATLAB&lt;/li>
&lt;li>Type &lt;code>simulink&lt;/code> in the command window and press Enter&lt;/li>
&lt;li>In the Library Browser, find &lt;strong>MCHP Blockset&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="step-2-create-a-new-model">Step 2: Create a New Model&lt;/h2>
&lt;ul>
&lt;li>Click &lt;strong>File → New → Model&lt;/strong> (or Ctrl+N)&lt;/li>
&lt;li>Save the model as &lt;code>my_first_mchp_project.slx&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="step-3-configure-target-hardware">Step 3: Configure Target Hardware&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Open &lt;strong>Model Configuration Parameters&lt;/strong> (Ctrl+E)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Navigate to &lt;strong>Code Generation → System target file&lt;/strong>&lt;/p></description></item><item><title>Scheduler &amp; Multitasking - MPLAB Device Blocks for Simulink</title><link>/getting_started/scheduler_multitasking.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/getting_started/scheduler_multitasking.html</guid><description>&lt;p>The MPLAB Device Blocks for Simulink includes a sophisticated scheduler that enables efficient execution of multi-rate Simulink models on resource-constrained microcontrollers. This guide explains the scheduler concepts, configuration options, and best practices for optimal performance.&lt;/p>
&lt;h2 id="single-rate-vs-multi-rate-models">Single-Rate vs Multi-Rate Models&lt;/h2>
&lt;h2 id="simulink-models-can-be-designed-with-blocks-executing-at-the-same-rate-single-rate-or-at-different-rates-multi-rate">Simulink models can be designed with blocks executing at the same rate (single-rate) or at different rates (multi-rate):&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Model Type&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;th>Example&lt;/th>
 &lt;th>Use Case&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Single-Rate&lt;/td>
 &lt;td>All blocks execute at the same sample time&lt;/td>
 &lt;td>All blocks at 1ms&lt;/td>
 &lt;td>Simple control loops, data acquisition&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Multi-Rate&lt;/td>
 &lt;td>Blocks execute at different sample times&lt;/td>
 &lt;td>1ms, 10ms, 100ms tasks&lt;/td>
 &lt;td>Motor control (fast current loop, slow speed loop, UI)&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;div class="note" style="background-color: #f0f8ff; border-left: 4px solid #0076A8; padding: 15px; margin: 20px 0;">
 💡 Why Multi-Rate?
Multi-rate models reduce CPU load by executing slow tasks (e.g., temperature monitoring, UI updates) less frequently than fast critical tasks (e.g., current control loops).
&lt;/div>

&lt;h2 id="single-tasking-vs-multi-tasking-implementation">Single-Tasking vs Multi-Tasking Implementation&lt;/h2>
&lt;p>For multi-rate models, the MPLAB Device Blocks toolbox offers two execution modes:&lt;/p></description></item><item><title>Supported Devices</title><link>/getting_started/supported_devices.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/getting_started/supported_devices.html</guid><description>&lt;p>The MCHP Blockset supports a wide range of Microchip microcontrollers and digital signal controllers across multiple families.&lt;/p>
&lt;h2 id="dspic33a-family-32-bit-digital-signal-controller-with-fpu">dsPIC33A Family (32-bit Digital Signal Controller with FPU)&lt;/h2>
&lt;h3 id="dspic33a-latest-generation---32-bit-architecture">dsPIC33A (Latest Generation - 32-bit Architecture)&lt;/h3>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Series&lt;/th>
 &lt;th>Architecture&lt;/th>
 &lt;th>Example Devices&lt;/th>
 &lt;th>Key Features&lt;/th>
 &lt;th>Compiler&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>dsPIC33AK&lt;/td>
 &lt;td>32-bit with FPU&lt;/td>
 &lt;td>33AK128MC106, 33AK512MPS512, 33AKV512GMS510&lt;/td>
 &lt;td>Hardware FPU, Advanced PWM with FEP, 12-bit ADC, Enhanced Security, ISA v3&lt;/td>
 &lt;td>XC-DSC v3.30+&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;div class="note" style="background-color: #f0f8ff; border-left: 4px solid #0076A8; padding: 15px; margin: 20px 0;">
 Important: dsPIC33A is fundamentally different from other dsPIC families - it features a 32-bit architecture with hardware floating-point unit (FPU), providing 10-100x faster performance for floating-point operations compared to traditional 16-bit dsPICs. This makes it ideal for advanced motor control and digital power applications requiring real-time floating-point computation.
&lt;/div>

&lt;h2 id="dspic-family-16-bit-digital-signal-controllers">dsPIC Family (16-bit Digital Signal Controllers)&lt;/h2>
&lt;h3 id="dspic33c-family">dsPIC33C Family&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Series&lt;/th>
 &lt;th>Example Devices&lt;/th>
 &lt;th>Key Features&lt;/th>
 &lt;th>Compiler&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>dsPIC33CK&lt;/td>
 &lt;td>33CK64MC105, 33CK256MP305, 33CK1024MP405&lt;/td>
 &lt;td>Dual-core options, Advanced PWM, 12-bit SAR ADC&lt;/td>
 &lt;td>XC-DSC v3.20+&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>dsPIC33CH&lt;/td>
 &lt;td>33CH128MP205, 33CH512MP305&lt;/td>
 &lt;td>Dual-core master/slave architecture&lt;/td>
 &lt;td>XC-DSC v3.20+&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>dsPIC33CDV&lt;/td>
 &lt;td>33CDV128MP206, 33CDV256MP206&lt;/td>
 &lt;td>Variable Frequency Drive (VFD) optimized&lt;/td>
 &lt;td>XC-DSC v3.20+&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="dspic33e-family">dsPIC33E Family&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Series&lt;/th>
 &lt;th>Example Devices&lt;/th>
 &lt;th>Key Features&lt;/th>
 &lt;th>Compiler&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>dsPIC33EP&lt;/td>
 &lt;td>33EP64MC504, 33EP256MC710, 33EP512MU810&lt;/td>
 &lt;td>High-resolution PWM, 10/12-bit ADC, Motor Control&lt;/td>
 &lt;td>XC16 v1.70+&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>dsPIC33EV&lt;/td>
 &lt;td>33EV32GM104, 33EV256GM106&lt;/td>
 &lt;td>Enhanced motor control peripherals&lt;/td>
 &lt;td>XC16 v1.70+&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="dspic33f-family-legacy">dsPIC33F Family (Legacy)&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Series&lt;/th>
 &lt;th>Example Devices&lt;/th>
 &lt;th>Key Features&lt;/th>
 &lt;th>Compiler&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>dsPIC33FJ&lt;/td>
 &lt;td>33FJ128MC804, 33FJ256MC710&lt;/td>
 &lt;td>General purpose DSC, Motor Control PWM&lt;/td>
 &lt;td>XC16 v1.26+&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="dspic30f-family-legacy">dsPIC30F Family (Legacy)&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Series&lt;/th>
 &lt;th>Example Devices&lt;/th>
 &lt;th>Key Features&lt;/th>
 &lt;th>Compiler&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>dsPIC30F&lt;/td>
 &lt;td>30F4011, 30F6015&lt;/td>
 &lt;td>Entry-level DSC, Basic PWM and ADC&lt;/td>
 &lt;td>XC16 v1.26+&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="pic32-family-32-bit-microcontrollers">PIC32 Family (32-bit Microcontrollers)&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Series&lt;/th>
 &lt;th>Architecture&lt;/th>
 &lt;th>Example Devices&lt;/th>
 &lt;th>Key Features&lt;/th>
 &lt;th>Compiler&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>PIC32MK&lt;/td>
 &lt;td>MIPS M-Class&lt;/td>
 &lt;td>PIC32MK0512GPE100&lt;/td>
 &lt;td>Motor Control, Op-Amps, 12-bit ADC&lt;/td>
 &lt;td>XC32 v2.40+&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>PIC32MZ&lt;/td>
 &lt;td>MIPS M-Class&lt;/td>
 &lt;td>PIC32MZ2048EFM&lt;/td>
 &lt;td>High performance, FPU, Ethernet, USB&lt;/td>
 &lt;td>XC32 v2.40+&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>PIC32MX&lt;/td>
 &lt;td>MIPS M4K&lt;/td>
 &lt;td>PIC32MX795F512L&lt;/td>
 &lt;td>General purpose, USB, CAN, Ethernet&lt;/td>
 &lt;td>XC32 v2.40+&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="sam-family-arm-cortex-m">SAM Family (ARM Cortex-M)&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Series&lt;/th>
 &lt;th>Core&lt;/th>
 &lt;th>Example Devices&lt;/th>
 &lt;th>Key Features&lt;/th>
 &lt;th>Compiler&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>SAME70&lt;/td>
 &lt;td>Cortex-M7&lt;/td>
 &lt;td>SAME70Q21, SAME70N21&lt;/td>
 &lt;td>300MHz, FPU, Ethernet, USB, CAN-FD&lt;/td>
 &lt;td>XC32&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>SAME54&lt;/td>
 &lt;td>Cortex-M4F&lt;/td>
 &lt;td>SAME54P20A&lt;/td>
 &lt;td>120MHz, FPU, TCC, ADC, DAC&lt;/td>
 &lt;td>XC32&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>SAMC21&lt;/td>
 &lt;td>Cortex-M0+&lt;/td>
 &lt;td>SAMC21J18A&lt;/td>
 &lt;td>48MHz, Motor Control optimized&lt;/td>
 &lt;td>XC32&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>SAMD21&lt;/td>
 &lt;td>Cortex-M0+&lt;/td>
 &lt;td>SAMD21G18A&lt;/td>
 &lt;td>48MHz, Low power, USB&lt;/td>
 &lt;td>XC32&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="peripheral-support-by-family">Peripheral Support by Family&lt;/h2>
&lt;h3 id="common-peripherals-all-families">Common Peripherals (All Families)&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>GPIO&lt;/strong> - Digital I/O with configurable pins&lt;/li>
&lt;li>&lt;strong>Timers&lt;/strong> - 16-bit/32-bit timers with interrupts&lt;/li>
&lt;li>&lt;strong>UART&lt;/strong> - Serial communication&lt;/li>
&lt;li>&lt;strong>SPI&lt;/strong> - Serial Peripheral Interface&lt;/li>
&lt;li>&lt;strong>I2C&lt;/strong> - Inter-Integrated Circuit&lt;/li>
&lt;/ul>
&lt;h3 id="motor-control-peripherals">Motor Control Peripherals&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>PWM&lt;/strong> - High-resolution PWM modules (dsPIC, PIC32MK)&lt;/li>
&lt;li>&lt;strong>PWM HS&lt;/strong> - High-speed PWM with fault protection (dsPIC33C/A)&lt;/li>
&lt;li>&lt;strong>QEI&lt;/strong> - Quadrature Encoder Interface (dsPIC, PIC32MK)&lt;/li>
&lt;li>&lt;strong>ADC&lt;/strong> - 10/12-bit with motor control triggers&lt;/li>
&lt;li>&lt;strong>Comparator&lt;/strong> - Analog comparators for fault detection&lt;/li>
&lt;/ul>
&lt;h3 id="communication-peripherals">Communication Peripherals&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>CAN&lt;/strong> - Controller Area Network (dsPIC, PIC32)&lt;/li>
&lt;li>&lt;strong>CAN-FD&lt;/strong> - CAN with Flexible Data-rate (dsPIC33C, SAME70)&lt;/li>
&lt;li>&lt;strong>Ethernet&lt;/strong> - 10/100 Ethernet MAC (PIC32MZ, SAME70)&lt;/li>
&lt;li>&lt;strong>USB&lt;/strong> - Full-speed/High-speed USB (PIC32, SAM)&lt;/li>
&lt;/ul>
&lt;h3 id="advanced-features">Advanced Features&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>DMA&lt;/strong> - Direct Memory Access (dsPIC33E/C/A, PIC32, SAM)&lt;/li>
&lt;li>&lt;strong>Op-Amps&lt;/strong> - Integrated operational amplifiers (PIC32MK, dsPIC33C)&lt;/li>
&lt;li>&lt;strong>DAC&lt;/strong> - Digital-to-Analog Converter (dsPIC33E/C/A, SAM)&lt;/li>
&lt;li>&lt;strong>Crypto&lt;/strong> - Hardware cryptographic engines (SAME70)&lt;/li>
&lt;/ul>
&lt;h2 id="device-selection-guide">Device Selection Guide&lt;/h2>
&lt;hr>
&lt;ul>
&lt;li>
&lt;hr>
&lt;/li>
&lt;li>
&lt;hr>
&lt;/li>
&lt;li>
&lt;hr>
&lt;/li>
&lt;li>
&lt;hr>
&lt;/li>
&lt;/ul>
&lt;h2 id="hahahugoshortcode100s1hbhb">&lt;div class="note" style="background-color: #f0f8ff; border-left: 4px solid #0076A8; padding: 15px; margin: 20px 0;">
 &lt;p>For Motor Control Applications:&lt;/p></description></item></channel></rss>