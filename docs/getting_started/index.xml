<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on MPLAB Device Blocks for Simulink</title><link>/getting_started/index.html</link><description>Recent content in Getting Started on MPLAB Device Blocks for Simulink</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 16 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="/getting_started/index.xml" rel="self" type="application/rss+xml"/><item><title>Board Templates</title><link>/getting_started/board_templates.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/getting_started/board_templates.html</guid><description>&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;Board templates provide pre-configured Simulink models optimized for popular Microchip development boards. These templates include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pre-configured Master block&lt;/strong&gt; with correct chip selection and clock settings&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Peripheral blocks&lt;/strong&gt; configured for board-specific hardware (PWM, ADC, UART, QEI, etc.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pin assignments&lt;/strong&gt; matching the physical board layout&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Example algorithms&lt;/strong&gt; demonstrating typical use cases (motor control, sensor interfaces)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Validated configurations&lt;/strong&gt; tested on actual hardware&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="note" style="background-color: #f0f8ff; border-left: 4px solid #0076A8; padding: 15px; margin: 20px 0;"&gt;
 Key Benefit: Templates eliminate hours of configuration work, allowing you to start developing control algorithms immediately. Simply select your board template, customize the algorithm, and build.
&lt;/div&gt;

&lt;h2 id="why-use-board-templates"&gt;Why Use Board Templates?&lt;/h2&gt;
&lt;hr&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Benefit&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Fast Prototyping&lt;/td&gt;
 &lt;td&gt;Start coding control algorithms in minutes instead of hours spent on peripheral configuration&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Validated Hardware&lt;/td&gt;
 &lt;td&gt;All pin assignments and peripheral settings verified on actual hardware - reduces debugging time&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Best Practices&lt;/td&gt;
 &lt;td&gt;Templates follow Microchip recommended configurations for optimal performance&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Learning Tool&lt;/td&gt;
 &lt;td&gt;Study working examples to understand peripheral configuration patterns&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Easy Portability&lt;/td&gt;
 &lt;td&gt;Switch between boards by simply loading a different template - same algorithm, different hardware&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="available-board-templates"&gt;Available Board Templates&lt;/h2&gt;
&lt;p&gt;&lt;picture&gt;&lt;source srcset="../images/toolbox_concepts/MCHP_i_Board_MCLV_2_hu_abdfe9413a1ca8df.webp" type="image/webp"&gt;&lt;img src="../images/toolbox_concepts/MCHP_i_Board_MCLV_2.png" alt="MCLV-2 Development Board" style="max-width: 100%; height: auto;"&gt;
 &lt;/picture&gt;&lt;/p&gt;</description></item><item><title>Data Visualization with PIC GUI</title><link>/getting_started/data_visualization.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/getting_started/data_visualization.html</guid><description>&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;h2 id="pic-gui-is-a-lightweight-user-friendly-data-visualization-tool-that-enables-real-time-monitoring-of-variables-from-your-embedded-application-unlike-external-mode-which-requires-xcp-protocol-pic-gui-provides-a-simplified-approach-to-streaming-data-over-uart-for-analysis-and-debugging"&gt;PIC GUI is a lightweight, user-friendly data visualization tool that enables real-time monitoring of variables from your embedded application. Unlike External Mode (which requires XCP protocol), PIC GUI provides a simplified approach to streaming data over UART for analysis and debugging.&lt;/h2&gt;
&lt;div class="note" style="background-color: #f0f8ff; border-left: 4px solid #0076A8; padding: 15px; margin: 20px 0;"&gt;
 Key Benefit: PIC GUI offers instant data visualization with minimal setup - just add a UART Tx-Matlab block, connect a serial cable, and start plotting. No complex protocol configuration required.
&lt;/div&gt;

&lt;h2 id="pic-gui-vs-external-mode"&gt;PIC GUI vs External Mode&lt;/h2&gt;
&lt;hr&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Feature&lt;/th&gt;
 &lt;th&gt;PIC GUI&lt;/th&gt;
 &lt;th&gt;External Mode&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Communication Protocol&lt;/td&gt;
 &lt;td&gt;Simple UART packet format&lt;/td&gt;
 &lt;td&gt;XCP protocol over Serial/TCP/UDP&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Setup Complexity&lt;/td&gt;
 &lt;td&gt;Very Simple&lt;/td&gt;
 &lt;td&gt;- Drag UART Tx-Matlab block, configure baud rate&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Data Monitoring&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;- Stream variables to MATLAB for plotting&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Parameter Tuning&lt;/td&gt;
 &lt;td&gt;No - Read-only data streaming&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Synchronization&lt;/td&gt;
 &lt;td&gt;Asynchronous data logging&lt;/td&gt;
 &lt;td&gt;Synchronized with Simulink simulation time&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Custom Visualization&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;- Full MATLAB scripting for custom plots/analysis&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Typical Use Case&lt;/td&gt;
 &lt;td&gt;Data logging, debugging, custom analysis&lt;/td&gt;
 &lt;td&gt;Interactive parameter tuning, live scope monitoring&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Hardware Requirements&lt;/td&gt;
 &lt;td&gt;UART peripheral + USB-Serial adapter&lt;/td&gt;
 &lt;td&gt;UART/Ethernet/CAN + XCP support&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="note" style="background-color: #f0f8ff; border-left: 4px solid #0076A8; padding: 15px; margin: 20px 0;"&gt;
 &lt;p&gt;When to Use Each Tool:&lt;/p&gt;</description></item><item><title>External Mode &amp; PIL Testing - MPLAB Device Blocks for Simulink</title><link>/getting_started/external_mode_pil.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/getting_started/external_mode_pil.html</guid><description>&lt;p&gt;The MPLAB Device Blocks for Simulink provides two powerful tools for testing and validating embedded algorithms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;External Mode&lt;/strong&gt;: Real-time parameter tuning and data visualization during code execution&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PIL (Processor-in-the-Loop)&lt;/strong&gt;: Verification of code generation accuracy and performance analysis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This guide explains both tools, their use cases, setup procedures, and best practices.&lt;/p&gt;
&lt;h2 id="external-mode-real-time-parameter-tuning"&gt;External Mode: Real-Time Parameter Tuning&lt;/h2&gt;
&lt;h3 id="what-is-external-mode"&gt;What is External Mode?&lt;/h3&gt;
&lt;p&gt;External Mode creates a bidirectional communication link between Simulink and your embedded target while the code is running. This enables:&lt;/p&gt;</description></item><item><title>MCHP Blockset Installation</title><link>/getting_started/installation.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/getting_started/installation.html</guid><description>&lt;h2 id="system-requirements"&gt;System Requirements&lt;/h2&gt;
&lt;h3 id="matlab-requirements"&gt;MATLAB Requirements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MATLAB&lt;/strong&gt; - R2010a or later (R2020b+ recommended)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Simulink&lt;/strong&gt; - Required for model-based design&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embedded Coder&lt;/strong&gt; - Required for code generation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MATLAB Coder&lt;/strong&gt; - Required for code generation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Simulink Coder&lt;/strong&gt; - Required for code generation&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="compiler-requirements"&gt;Compiler Requirements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;XC16&lt;/strong&gt; - For dsPIC 30F, 33F, 33E devices&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;XC-DSC&lt;/strong&gt; - For dsPIC 33C, 33A devices (v3.30+ recommended)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;XC32&lt;/strong&gt; - For PIC32 and SAM devices (ARM-based)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="note" style="background-color: #f0f8ff; border-left: 4px solid #0076A8; padding: 15px; margin: 20px 0;"&gt;
 Note: Compilers can be downloaded from Microchip Developer Tools
&lt;/div&gt;

&lt;h3 id="hardware-requirements"&gt;Hardware Requirements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Programmer/Debugger&lt;/strong&gt; - ICD4, ICD5, PICkit4, or compatible&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Development Board&lt;/strong&gt; - (Optional) MCLV-2, Curiosity, Explorer 16/32, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="installation-steps"&gt;Installation Steps&lt;/h2&gt;
&lt;h3 id="1-install-matlab-toolboxes"&gt;1. Install MATLAB Toolboxes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Launch MATLAB&lt;/li&gt;
&lt;li&gt;Open Add-Ons manager (Home → Add-Ons → Get Add-Ons)&lt;/li&gt;
&lt;li&gt;Install required toolboxes:&lt;/li&gt;
&lt;li&gt;Embedded Coder&lt;/li&gt;
&lt;li&gt;MATLAB Coder&lt;/li&gt;
&lt;li&gt;Simulink Coder&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2-install-microchip-compilers"&gt;2. Install Microchip Compilers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download compilers from [Microchip website]&lt;/p&gt;</description></item><item><title>MCHP Blockset Overview</title><link>/getting_started/overview.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/getting_started/overview.html</guid><description>&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;h2 id="the-mchp-blockset-enables-model-based-design-for-microchip-microcontrollers-providing-a-comprehensive-library-of-peripheral-blocks-for-embedded-code-generation-from-simulink-models"&gt;The MCHP Blockset enables Model-Based Design for Microchip microcontrollers, providing a comprehensive library of peripheral blocks for embedded code generation from Simulink models.&lt;/h2&gt;
&lt;div class="note" style="background-color: #f0f8ff; border-left: 4px solid #0076A8; padding: 15px; margin: 20px 0;"&gt;
 Key Benefit: Design, simulate, and deploy control algorithms directly to Microchip hardware without hand-coding peripheral drivers.
&lt;/div&gt;

&lt;h2 id="key-features"&gt;Key Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Automatic C Code Generation&lt;/strong&gt; - Generate optimized embedded C code for dsPIC, PIC32, and SAM devices&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comprehensive Peripheral Library&lt;/strong&gt; - PWM, ADC, UART, SPI, I2C, CAN, Timers, and more&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;External Mode&lt;/strong&gt; - Real-time parameter tuning and signal monitoring&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Processor-in-the-Loop (PIL)&lt;/strong&gt; - Validate generated code on actual hardware&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hardware Optimizations&lt;/strong&gt; - Assembly code replacement for dsPIC families&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multitasking Scheduler&lt;/strong&gt; - Rate monotonic scheduler for multi-rate applications&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="supported-device-families"&gt;Supported Device Families&lt;/h2&gt;
&lt;hr&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Family&lt;/th&gt;
 &lt;th&gt;Architecture&lt;/th&gt;
 &lt;th&gt;Series&lt;/th&gt;
 &lt;th&gt;Typical Applications&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC33A&lt;/td&gt;
 &lt;td&gt;32-bit DSC with FPU&lt;/td&gt;
 &lt;td&gt;33AK&lt;/td&gt;
 &lt;td&gt;Advanced Motor Control, Digital Power, Floating-Point DSP&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC&lt;/td&gt;
 &lt;td&gt;16-bit DSC&lt;/td&gt;
 &lt;td&gt;30F, 33F, 33E, 33CH, 33CK, 33CDV&lt;/td&gt;
 &lt;td&gt;Motor Control, Power Conversion, Digital Power&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;PIC32&lt;/td&gt;
 &lt;td&gt;32-bit MCU&lt;/td&gt;
 &lt;td&gt;MK, MZ, MX&lt;/td&gt;
 &lt;td&gt;IoT, Industrial Control, Audio Processing&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SAM&lt;/td&gt;
 &lt;td&gt;ARM Cortex-M&lt;/td&gt;
 &lt;td&gt;E5x, E7x, C2x, D2x&lt;/td&gt;
 &lt;td&gt;Industrial Automation, Motor Control&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="note" style="background-color: #f0f8ff; border-left: 4px solid #0076A8; padding: 15px; margin: 20px 0;"&gt;
 Note on dsPIC33A: The dsPIC33A family represents a significant architectural advancement with its 32-bit core and hardware FPU, offering 10-100x faster floating-point performance compared to 16-bit dsPIC families. See Supported Devices for details.
&lt;/div&gt;

&lt;h2 id="model-based-design-workflow"&gt;Model-Based Design Workflow&lt;/h2&gt;
&lt;p&gt;The MCHP Blockset implements a complete Model-Based Design (MBD) workflow, enabling seamless transition from algorithm simulation to embedded code execution. The workflow follows three main phases:&lt;/p&gt;</description></item><item><title>Motor Control Examples - MPLAB Device Blocks for Simulink</title><link>/getting_started/motor_control_examples.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/getting_started/motor_control_examples.html</guid><description>&lt;h3 id="-third-party-educational-content"&gt;⚠️ Third-Party Educational Content&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;The motor control examples and algorithms presented in this guide are provided by the ctrl-elec project, an educational initiative from INSA Lyon (France).&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Attribution:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Project:&lt;/strong&gt; ctrl-elec - Real-time Control &amp;amp; Embedded Systems Education&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Institution:&lt;/strong&gt; Institut National des Sciences Appliquées de Lyon (INSA Lyon)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Website:&lt;/strong&gt;[https://www.ctrl-elec.fr/]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub Repository:&lt;/strong&gt;[https://github.com/rdelpoux/ctrl-elec]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RCP Platform:&lt;/strong&gt;[http://rcp.ctrl-elec.fr/]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;License:&lt;/strong&gt; Educational use - Please refer to the ctrl-elec website for specific licensing terms.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This content is included in the MPLAB Device Blocks for Simulink documentation to demonstrate real-world motor control applications. Microchip Technology and the MPLAB Device Blocks toolbox are separate from the ctrl-elec project.&lt;/em&gt;&lt;/p&gt;</description></item><item><title>Quick Start Guide</title><link>/getting_started/quick_start.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/getting_started/quick_start.html</guid><description>&lt;p&gt;This guide will walk you through creating your first MCHP Blockset project in 10 minutes.&lt;/p&gt;
&lt;h2 id="step-1-open-simulink-library-browser"&gt;Step 1: Open Simulink Library Browser&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Launch MATLAB&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;simulink&lt;/code&gt; in the command window and press Enter&lt;/li&gt;
&lt;li&gt;In the Library Browser, find &lt;strong&gt;MCHP Blockset&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="step-2-create-a-new-model"&gt;Step 2: Create a New Model&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Click &lt;strong&gt;File → New → Model&lt;/strong&gt; (or Ctrl+N)&lt;/li&gt;
&lt;li&gt;Save the model as &lt;code&gt;my_first_mchp_project.slx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="step-3-configure-target-hardware"&gt;Step 3: Configure Target Hardware&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Open &lt;strong&gt;Model Configuration Parameters&lt;/strong&gt; (Ctrl+E)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Navigate to &lt;strong&gt;Code Generation → System target file&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>Scheduler &amp; Multitasking - MPLAB Device Blocks for Simulink</title><link>/getting_started/scheduler_multitasking.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/getting_started/scheduler_multitasking.html</guid><description>&lt;p&gt;The MPLAB Device Blocks for Simulink includes a sophisticated scheduler that enables efficient execution of multi-rate Simulink models on resource-constrained microcontrollers. This guide explains the scheduler concepts, configuration options, and best practices for optimal performance.&lt;/p&gt;
&lt;h2 id="single-rate-vs-multi-rate-models"&gt;Single-Rate vs Multi-Rate Models&lt;/h2&gt;
&lt;h2 id="simulink-models-can-be-designed-with-blocks-executing-at-the-same-rate-single-rate-or-at-different-rates-multi-rate"&gt;Simulink models can be designed with blocks executing at the same rate (single-rate) or at different rates (multi-rate):&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Model Type&lt;/th&gt;
 &lt;th&gt;Description&lt;/th&gt;
 &lt;th&gt;Example&lt;/th&gt;
 &lt;th&gt;Use Case&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Single-Rate&lt;/td&gt;
 &lt;td&gt;All blocks execute at the same sample time&lt;/td&gt;
 &lt;td&gt;All blocks at 1ms&lt;/td&gt;
 &lt;td&gt;Simple control loops, data acquisition&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Multi-Rate&lt;/td&gt;
 &lt;td&gt;Blocks execute at different sample times&lt;/td&gt;
 &lt;td&gt;1ms, 10ms, 100ms tasks&lt;/td&gt;
 &lt;td&gt;Motor control (fast current loop, slow speed loop, UI)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;div class="note" style="background-color: #f0f8ff; border-left: 4px solid #0076A8; padding: 15px; margin: 20px 0;"&gt;
 💡 Why Multi-Rate?
Multi-rate models reduce CPU load by executing slow tasks (e.g., temperature monitoring, UI updates) less frequently than fast critical tasks (e.g., current control loops).
&lt;/div&gt;

&lt;h2 id="single-tasking-vs-multi-tasking-implementation"&gt;Single-Tasking vs Multi-Tasking Implementation&lt;/h2&gt;
&lt;p&gt;For multi-rate models, the MPLAB Device Blocks toolbox offers two execution modes:&lt;/p&gt;</description></item><item><title>Supported Devices</title><link>/getting_started/supported_devices.html</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>/getting_started/supported_devices.html</guid><description>&lt;p&gt;The MCHP Blockset supports a wide range of Microchip microcontrollers and digital signal controllers across multiple families.&lt;/p&gt;
&lt;h2 id="dspic33a-family-32-bit-digital-signal-controller-with-fpu"&gt;dsPIC33A Family (32-bit Digital Signal Controller with FPU)&lt;/h2&gt;
&lt;h3 id="dspic33a-latest-generation---32-bit-architecture"&gt;dsPIC33A (Latest Generation - 32-bit Architecture)&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Series&lt;/th&gt;
 &lt;th&gt;Architecture&lt;/th&gt;
 &lt;th&gt;Example Devices&lt;/th&gt;
 &lt;th&gt;Key Features&lt;/th&gt;
 &lt;th&gt;Compiler&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC33AK&lt;/td&gt;
 &lt;td&gt;32-bit with FPU&lt;/td&gt;
 &lt;td&gt;33AK128MC106, 33AK512MPS512, 33AKV512GMS510&lt;/td&gt;
 &lt;td&gt;Hardware FPU, Advanced PWM with FEP, 12-bit ADC, Enhanced Security, ISA v3&lt;/td&gt;
 &lt;td&gt;XC-DSC v3.30+&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;div class="note" style="background-color: #f0f8ff; border-left: 4px solid #0076A8; padding: 15px; margin: 20px 0;"&gt;
 Important: dsPIC33A is fundamentally different from other dsPIC families - it features a 32-bit architecture with hardware floating-point unit (FPU), providing 10-100x faster performance for floating-point operations compared to traditional 16-bit dsPICs. This makes it ideal for advanced motor control and digital power applications requiring real-time floating-point computation.
&lt;/div&gt;

&lt;h2 id="dspic-family-16-bit-digital-signal-controllers"&gt;dsPIC Family (16-bit Digital Signal Controllers)&lt;/h2&gt;
&lt;h3 id="dspic33c-family"&gt;dsPIC33C Family&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Series&lt;/th&gt;
 &lt;th&gt;Example Devices&lt;/th&gt;
 &lt;th&gt;Key Features&lt;/th&gt;
 &lt;th&gt;Compiler&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC33CK&lt;/td&gt;
 &lt;td&gt;33CK64MC105, 33CK256MP305, 33CK1024MP405&lt;/td&gt;
 &lt;td&gt;Dual-core options, Advanced PWM, 12-bit SAR ADC&lt;/td&gt;
 &lt;td&gt;XC-DSC v3.20+&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC33CH&lt;/td&gt;
 &lt;td&gt;33CH128MP205, 33CH512MP305&lt;/td&gt;
 &lt;td&gt;Dual-core master/slave architecture&lt;/td&gt;
 &lt;td&gt;XC-DSC v3.20+&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC33CDV&lt;/td&gt;
 &lt;td&gt;33CDV128MP206, 33CDV256MP206&lt;/td&gt;
 &lt;td&gt;Variable Frequency Drive (VFD) optimized&lt;/td&gt;
 &lt;td&gt;XC-DSC v3.20+&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="dspic33e-family"&gt;dsPIC33E Family&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Series&lt;/th&gt;
 &lt;th&gt;Example Devices&lt;/th&gt;
 &lt;th&gt;Key Features&lt;/th&gt;
 &lt;th&gt;Compiler&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC33EP&lt;/td&gt;
 &lt;td&gt;33EP64MC504, 33EP256MC710, 33EP512MU810&lt;/td&gt;
 &lt;td&gt;High-resolution PWM, 10/12-bit ADC, Motor Control&lt;/td&gt;
 &lt;td&gt;XC16 v1.70+&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC33EV&lt;/td&gt;
 &lt;td&gt;33EV32GM104, 33EV256GM106&lt;/td&gt;
 &lt;td&gt;Enhanced motor control peripherals&lt;/td&gt;
 &lt;td&gt;XC16 v1.70+&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="dspic33f-family-legacy"&gt;dsPIC33F Family (Legacy)&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Series&lt;/th&gt;
 &lt;th&gt;Example Devices&lt;/th&gt;
 &lt;th&gt;Key Features&lt;/th&gt;
 &lt;th&gt;Compiler&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC33FJ&lt;/td&gt;
 &lt;td&gt;33FJ128MC804, 33FJ256MC710&lt;/td&gt;
 &lt;td&gt;General purpose DSC, Motor Control PWM&lt;/td&gt;
 &lt;td&gt;XC16 v1.26+&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="dspic30f-family-legacy"&gt;dsPIC30F Family (Legacy)&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Series&lt;/th&gt;
 &lt;th&gt;Example Devices&lt;/th&gt;
 &lt;th&gt;Key Features&lt;/th&gt;
 &lt;th&gt;Compiler&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;dsPIC30F&lt;/td&gt;
 &lt;td&gt;30F4011, 30F6015&lt;/td&gt;
 &lt;td&gt;Entry-level DSC, Basic PWM and ADC&lt;/td&gt;
 &lt;td&gt;XC16 v1.26+&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="pic32-family-32-bit-microcontrollers"&gt;PIC32 Family (32-bit Microcontrollers)&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Series&lt;/th&gt;
 &lt;th&gt;Architecture&lt;/th&gt;
 &lt;th&gt;Example Devices&lt;/th&gt;
 &lt;th&gt;Key Features&lt;/th&gt;
 &lt;th&gt;Compiler&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;PIC32MK&lt;/td&gt;
 &lt;td&gt;MIPS M-Class&lt;/td&gt;
 &lt;td&gt;PIC32MK0512GPE100&lt;/td&gt;
 &lt;td&gt;Motor Control, Op-Amps, 12-bit ADC&lt;/td&gt;
 &lt;td&gt;XC32 v2.40+&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;PIC32MZ&lt;/td&gt;
 &lt;td&gt;MIPS M-Class&lt;/td&gt;
 &lt;td&gt;PIC32MZ2048EFM&lt;/td&gt;
 &lt;td&gt;High performance, FPU, Ethernet, USB&lt;/td&gt;
 &lt;td&gt;XC32 v2.40+&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;PIC32MX&lt;/td&gt;
 &lt;td&gt;MIPS M4K&lt;/td&gt;
 &lt;td&gt;PIC32MX795F512L&lt;/td&gt;
 &lt;td&gt;General purpose, USB, CAN, Ethernet&lt;/td&gt;
 &lt;td&gt;XC32 v2.40+&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="sam-family-arm-cortex-m"&gt;SAM Family (ARM Cortex-M)&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Series&lt;/th&gt;
 &lt;th&gt;Core&lt;/th&gt;
 &lt;th&gt;Example Devices&lt;/th&gt;
 &lt;th&gt;Key Features&lt;/th&gt;
 &lt;th&gt;Compiler&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;SAME70&lt;/td&gt;
 &lt;td&gt;Cortex-M7&lt;/td&gt;
 &lt;td&gt;SAME70Q21, SAME70N21&lt;/td&gt;
 &lt;td&gt;300MHz, FPU, Ethernet, USB, CAN-FD&lt;/td&gt;
 &lt;td&gt;XC32&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SAME54&lt;/td&gt;
 &lt;td&gt;Cortex-M4F&lt;/td&gt;
 &lt;td&gt;SAME54P20A&lt;/td&gt;
 &lt;td&gt;120MHz, FPU, TCC, ADC, DAC&lt;/td&gt;
 &lt;td&gt;XC32&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SAMC21&lt;/td&gt;
 &lt;td&gt;Cortex-M0+&lt;/td&gt;
 &lt;td&gt;SAMC21J18A&lt;/td&gt;
 &lt;td&gt;48MHz, Motor Control optimized&lt;/td&gt;
 &lt;td&gt;XC32&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SAMD21&lt;/td&gt;
 &lt;td&gt;Cortex-M0+&lt;/td&gt;
 &lt;td&gt;SAMD21G18A&lt;/td&gt;
 &lt;td&gt;48MHz, Low power, USB&lt;/td&gt;
 &lt;td&gt;XC32&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="peripheral-support-by-family"&gt;Peripheral Support by Family&lt;/h2&gt;
&lt;h3 id="common-peripherals-all-families"&gt;Common Peripherals (All Families)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GPIO&lt;/strong&gt; - Digital I/O with configurable pins&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Timers&lt;/strong&gt; - 16-bit/32-bit timers with interrupts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UART&lt;/strong&gt; - Serial communication&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SPI&lt;/strong&gt; - Serial Peripheral Interface&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I2C&lt;/strong&gt; - Inter-Integrated Circuit&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="motor-control-peripherals"&gt;Motor Control Peripherals&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PWM&lt;/strong&gt; - High-resolution PWM modules (dsPIC, PIC32MK)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PWM HS&lt;/strong&gt; - High-speed PWM with fault protection (dsPIC33C/A)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QEI&lt;/strong&gt; - Quadrature Encoder Interface (dsPIC, PIC32MK)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ADC&lt;/strong&gt; - 10/12-bit with motor control triggers&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comparator&lt;/strong&gt; - Analog comparators for fault detection&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="communication-peripherals"&gt;Communication Peripherals&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CAN&lt;/strong&gt; - Controller Area Network (dsPIC, PIC32)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CAN-FD&lt;/strong&gt; - CAN with Flexible Data-rate (dsPIC33C, SAME70)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ethernet&lt;/strong&gt; - 10/100 Ethernet MAC (PIC32MZ, SAME70)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;USB&lt;/strong&gt; - Full-speed/High-speed USB (PIC32, SAM)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="advanced-features"&gt;Advanced Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DMA&lt;/strong&gt; - Direct Memory Access (dsPIC33E/C/A, PIC32, SAM)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Op-Amps&lt;/strong&gt; - Integrated operational amplifiers (PIC32MK, dsPIC33C)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DAC&lt;/strong&gt; - Digital-to-Analog Converter (dsPIC33E/C/A, SAM)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Crypto&lt;/strong&gt; - Hardware cryptographic engines (SAME70)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="device-selection-guide"&gt;Device Selection Guide&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="hahahugoshortcode115s1hbhb"&gt;&lt;div class="note" style="background-color: #f0f8ff; border-left: 4px solid #0076A8; padding: 15px; margin: 20px 0;"&gt;
 &lt;p&gt;For Motor Control Applications:&lt;/p&gt;</description></item></channel></rss>